
policy_module(cobbler, 1.1.0)

########################################
#
# Cobbler personal declarations.
#

## <desc>
## <p>
##	Allow Cobbler to modify public files
##	used for public file transfer services.
## </p>
## </desc>
gen_tunable(cobbler_anon_write, false)

## <desc>
## <p>
##	Allow Cobbler to use reposync.
## </p>
## </desc>
gen_tunable(cobbler_can_rsync, false)

## <desc>
## <p>
##	Allow Cobbler to use Cobbler check (It is encouraged
##	that you leave this disabeled).
## </p>
## </desc>
gen_tunable(cobbler_can_check, false)

## <desc>
## <p>
##	Allow Cobbler reposync to connect to the
##	network using TCP (This requires that
##	boolean cobbler_can_reposync is set to
##	true as well).
## </p>
## </desc>
gen_tunable(cobbler_rsync_can_network_connect, false)

## <desc>
## <p>
##	Allow Cobbler to access cifs file systems.
## </p>
## </desc>
gen_tunable(cobbler_use_cifs, false)

## <desc>
## <p>
##	Allow Cobbler to access nfs file systems.
## </p>
## </desc>
gen_tunable(cobbler_use_nfs, false)

attribute cobblerd_domain;

type cobblerd_t, cobblerd_domain;
type cobblerd_exec_t;
init_daemon_domain(cobblerd_t, cobblerd_exec_t)

type cobblerd_rsync_t, cobblerd_domain;
domain_type(cobblerd_rsync_t)

type cobblerd_initrc_exec_t;
init_script_file(cobblerd_initrc_exec_t)

type cobbler_etc_t;
files_config_file(cobbler_etc_t)

type cobbler_content_t;
files_type(cobbler_content_t)

type cobbler_var_log_t;
logging_log_file(cobbler_var_log_t)

type cobbler_var_lib_t;
files_type(cobbler_var_lib_t)

type cobbler_tmp_t;
files_tmp_file(cobbler_tmp_t)

########################################
#
# Cobblerd personal policy.
#

allow cobblerd_t self:capability { chown dac_override fowner sys_nice };
dontaudit cobblerd_t self:capability sys_tty_config;
allow cobblerd_t self:process { getsched setsched signal };
allow cobblerd_t self:fifo_file rw_fifo_file_perms;
allow cobblerd_t self:tcp_socket create_stream_socket_perms;

list_dirs_pattern(cobblerd_t, cobbler_etc_t, cobbler_etc_t)
read_files_pattern(cobblerd_t, cobbler_etc_t, cobbler_etc_t)

manage_dirs_pattern(cobblerd_t, cobbler_content_t, cobbler_content_t)
manage_files_pattern(cobblerd_t, cobbler_content_t, cobbler_content_t)
manage_lnk_files_pattern(cobblerd_t, cobbler_content_t, cobbler_content_t)

manage_dirs_pattern(cobblerd_t, cobbler_var_lib_t, cobbler_var_lib_t)
manage_files_pattern(cobblerd_t, cobbler_var_lib_t, cobbler_var_lib_t)
files_var_lib_filetrans(cobblerd_t, cobbler_var_lib_t, { dir file })

allow cobblerd_t cobbler_var_log_t:file write;

append_files_pattern(cobblerd_t, cobbler_var_log_t, cobbler_var_log_t)
create_files_pattern(cobblerd_t, cobbler_var_log_t, cobbler_var_log_t)
read_files_pattern(cobblerd_t, cobbler_var_log_t, cobbler_var_log_t)
setattr_files_pattern(cobblerd_t, cobbler_var_log_t, cobbler_var_log_t)
logging_log_filetrans(cobblerd_t, cobbler_var_log_t, file)

manage_dirs_pattern(cobblerd_t, cobbler_tmp_t, cobbler_tmp_t)
manage_files_pattern(cobblerd_t, cobbler_tmp_t, cobbler_tmp_t)
files_tmp_filetrans(cobblerd_t, cobbler_tmp_t, { dir file })

kernel_read_system_state(cobblerd_t)

corecmd_exec_bin(cobblerd_t)
corecmd_exec_shell(cobblerd_t)

corenet_all_recvfrom_netlabel(cobblerd_t)
corenet_all_recvfrom_unlabeled(cobblerd_t)
corenet_tcp_bind_generic_node(cobblerd_t)
corenet_tcp_sendrecv_generic_if(cobblerd_t)
corenet_tcp_sendrecv_generic_node(cobblerd_t)
corenet_tcp_sendrecv_generic_port(cobblerd_t)
corenet_tcp_bind_cobbler_port(cobblerd_t)
corenet_tcp_sendrecv_cobbler_port(cobblerd_t)
corenet_sendrecv_cobbler_server_packets(cobblerd_t)

dev_read_urand(cobblerd_t)

files_read_etc_files(cobblerd_t)
files_read_etc_runtime_files(cobblerd_t)
files_read_usr_files(cobblerd_t)
files_list_boot(cobblerd_t)
files_list_tmp(cobblerd_t)

fs_read_iso9660_files(cobblerd_t)

term_dontaudit_use_console(cobblerd_t)

miscfiles_read_localization(cobblerd_t)
miscfiles_read_public_files(cobblerd_t)

sysnet_read_config(cobblerd_t)
sysnet_rw_dhcp_config(cobblerd_t)
sysnet_write_config(cobblerd_t)

tunable_policy(`cobbler_anon_write',`
	miscfiles_manage_public_files(cobblerd_t)
')

optional_policy(`
	tunable_policy(`cobbler_can_rsync',`
		rsync_entry_spec_domtrans(cobblerd_t, cobblerd_rsync_t)
	')
')

tunable_policy(`cobbler_can_check',`
	allow cobblerd_t self:capability sys_ptrace;

	kernel_read_network_state(cobblerd_t)

	domain_read_all_domains_state(cobblerd_t)

	# syntax error: typeattribute cobblerd_t initrc_transition_domain;
	# cobblerd_initrc_domtrans(cobblerd_t)
	consoletype_domtrans(cobblerd_t)
	# iptables_initrc_domtrans(cobblerd_t)
	iptables_domtrans(cobblerd_t)
	# with conditional would not build.
	modutils_domtrans_insmod_uncond(cobblerd_t)

	seutil_domtrans_semanage(cobblerd_t)
	seutil_domtrans_setfiles(cobblerd_t)

	userdom_use_user_terminals(cobblerd_t)
	userdom_search_user_home_dirs(cobblerd_t)
	userdom_search_admin_dir(cobblerd_t)
',`
	dontaudit cobblerd_t self:capability sys_ptrace;

	kernel_dontaudit_search_network_state(cobblerd_t)

	domain_dontaudit_exec_all_entry_files(cobblerd_t)
	domain_dontaudit_read_all_domains_state(cobblerd_t)

	init_dontaudit_read_all_script_files(cobblerd_t)

	selinux_dontaudit_read_fs(cobblerd_t)

	userdom_dontaudit_use_user_terminals(cobblerd_t)
	userdom_dontaudit_search_user_home_dirs(cobblerd_t)
	userdom_dontaudit_search_admin_dir(cobblerd_t)
')

tunable_policy(`cobbler_use_cifs',`
	fs_manage_cifs_dirs(cobblerd_t)
	fs_manage_cifs_files(cobblerd_t)
	fs_manage_cifs_symlinks(cobblerd_t)
')

tunable_policy(`cobbler_use_nfs',`
	fs_manage_nfs_dirs(cobblerd_t)
	fs_manage_nfs_files(cobblerd_t)
	fs_manage_nfs_symlinks(cobblerd_t)
')

optional_policy(`
	bind_read_config(cobblerd_t)
	bind_write_config(cobblerd_t)
	bind_domtrans_ndc(cobblerd_t)
	bind_domtrans(cobblerd_t)
	bind_initrc_domtrans(cobblerd_t)
	bind_manage_zone(cobblerd_t)
')

optional_policy(`
	dhcpd_domtrans(cobblerd_t)
	dhcpd_initrc_domtrans(cobblerd_t)
')

optional_policy(`
	dnsmasq_domtrans(cobblerd_t)
	dnsmasq_initrc_domtrans(cobblerd_t)
	dnsmasq_write_config(cobblerd_t)
')

optional_policy(`
	rpm_exec(cobblerd_t)
')

optional_policy(`
	rsync_manage_config(cobblerd_t)
	rsync_filetrans_config(cobblerd_t, file)
')

optional_policy(`
	tftp_filetrans_tftpdir(cobblerd_t, cobbler_content_t, { dir file })
')

########################################
#
# Cobblerd global local policy.
#

########################################
#
# Cobbler reposync local policy.
#

optional_policy(`
	tunable_policy(`cobbler_can_rsync',`
		allow cobblerd_rsync_t self:capability fsetid;
		allow cobblerd_rsync_t self:netlink_route_socket create_netlink_socket_perms;
		allow cobblerd_rsync_t self:udp_socket create_stream_socket_perms;

		corenet_tcp_connect_ftp_port(cobblerd_rsync_t)
		corenet_tcp_sendrecv_ftp_port(cobblerd_rsync_t)
		corenet_sendrecv_ftp_client_packets(cobblerd_rsync_t)
		corenet_tcp_connect_http_port(cobblerd_rsync_t)
		corenet_tcp_sendrecv_http_port(cobblerd_rsync_t)
		corenet_sendrecv_http_client_packets(cobblerd_rsync_t)

		certmaster_exec(cobblerd_rsync_t)
	')
')

tunable_policy(`cobbler_can_rsync && cobbler_rsync_can_network_connect',`
	corenet_tcp_connect_all_ports(cobblerd_rsync_t)
	corenet_tcp_sendrecv_all_ports(cobblerd_rsync_t)
	corenet_sendrecv_all_client_packets(cobblerd_rsync_t)
')

########################################
#
# Cobbler web local policy.
#

optional_policy(`
	apache_content_template(cobbler)
	filetrans_pattern(cobblerd_t, httpd_cobbler_content_t, cobbler_content_t, dir)
')
