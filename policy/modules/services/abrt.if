## <summary>ABRT automated bug-reporting tool.</summary>

######################################
## <summary>
##	Execute a domain transition to run
##	abrt.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`abrt_domtrans',`
	gen_require(`
		type abrt_t, abrt_exec_t;
	')

	domtrans_pattern($1, abrt_exec_t, abrt_t)
	corecmd_search_bin($1)
')

######################################
## <summary>
##	Execute abrt.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_exec',`
	gen_require(`
		type abrt_exec_t;
	')

	can_exec($1, abrt_exec_t)
	corecmd_search_bin($1)
')

########################################
## <summary>
##	Connect to abrt over unix stream
##	sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_stream_connect',`
	gen_require(`
		type abrt_t, abrt_var_run_t;
	')

	stream_connect_pattern($1, abrt_var_run_t, abrt_var_run_t, abrt_t)
	files_search_pids($1)
')

########################################
## <summary>
##	Send and receive messages from
##	abrt over dbus.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_dbus_chat',`
	gen_require(`
		type abrt_t;
		class dbus send_msg;
	')

	allow $1 abrt_t:dbus send_msg;
	allow abrt_t $1:dbus send_msg;
')

#####################################
## <summary>
##	Execute a domain transition to run
##	abrt helper.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed to transition.
##  </summary>
## </param>
#
interface(`abrt_domtrans_helper',`
	gen_require(`
		type abrt_helper_t, abrt_helper_exec_t;
	')

	domtrans_pattern($1, abrt_helper_exec_t, abrt_helper_t)
	corecmd_search_bin($1)

	ifdef(`hide_broken_symptoms',`
		dontaudit abrt_helper_t $1:socket_class_set rw_inherited_sock_file_perms;
	')
')

########################################
## <summary>
##	Execute a domain transition to run
##	abrt helper, and allow the specified
##	role the abrt helper domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the abrt helper
##	domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`abrt_run_helper',`
	gen_require(`
		type abrt_helper_t;
	')

	abrt_domtrans_helper($1)
	role $2 types abrt_helper_t;
')

########################################
## <summary>
##	Manage abrt cache files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_cache_manage',`
	gen_require(`
		type abrt_var_cache_t;
	')

	manage_files_pattern($1, abrt_var_cache_t, abrt_var_cache_t)
	files_search_var($1)
')

####################################
## <summary>
##	Read abrt configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_read_config',`
	gen_require(`
		type abrt_etc_t;
	')

	read_files_pattern($1, abrt_etc_t, abrt_etc_t)
	files_search_etc($1)
')

######################################
## <summary>
##	Read abrt log files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_read_log',`
	gen_require(`
		type abrt_var_log_t;
	')

	read_files_pattern($1, abrt_var_log_t, abrt_var_log_t)
	logging_search_logs($1)
')

######################################
## <summary>
##	Read abrt PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_read_pid_files',`
	gen_require(`
		type abrt_var_run_t;
	')

	read_files_pattern($1, abrt_var_run_t, abrt_var_run_t)
	files_search_pids($1)
')

######################################
## <summary>
##	manage abrt PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_manage_pid_files',`
	gen_require(`
		type abrt_var_run_t;
	')

	manage_files_pattern($1, abrt_var_run_t, abrt_var_run_t)
	files_search_pids($1)
')

########################################
## <summary>
##	Read abrt state files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to allow access.
##	</summary>
## </param>
#
interface(`abrt_read_state',`
	gen_require(`
		type abrt_t;
	')

	ps_process_pattern($1, abrt_t)
	kernel_search_proc($1)
')

########################################
## <summary>
##	Send null signals to abrt.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_signull',`
	gen_require(`
		type abrt_t;
	')

	allow $1 abrt_t:process signull;
')

########################################
## <summary>
##	Read and write abrt pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`abrt_rw_fifo_file',`
	gen_require(`
		type abrt_t;
	')

	allow $1 abrt_t:fifo_file rw_inherited_fifo_file_perms;
')

#####################################
## <summary>
##	All of the rules required to administrate
##	an abrt environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed to manage the
##	abrt domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`abrt_admin',`
	gen_require(`
		type abrt_t, abrt_etc_t;
		type abrt_var_cache_t, abrt_var_log_t;
		type abrt_var_run_t, abrt_tmp_t;
		type abrt_initrc_exec_t;
	')

	allow $1 abrt_t:process { ptrace signal_perms };
	ps_process_pattern($1, abrt_t)

	init_labeled_script_domtrans($1, abrt_initrc_exec_t)
	domain_system_change_exemption($1)
	role_transition $2 abrt_initrc_exec_t system_r;
	allow $2 system_r;

	admin_pattern($1, abrt_etc_t)
	files_search_etc($1)

	admin_pattern($1, abrt_var_log_t)
	logging_search_logs($1)

	admin_pattern($1, abrt_var_cache_t)
	files_search_var($1)

	admin_pattern($1, abrt_var_run_t)
	files_search_pids($1)

	admin_pattern($1, abrt_tmp_t)
	files_search_tmp($1)
')
