## <summary>Various tools for managing user accounts.</summary>

########################################
## <summary>
##	Execute a domain transition to
##	run Chfn.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`usermanage_domtrans_chfn',`
	gen_require(`
		type chfn_t, chfn_exec_t;
	')

	domtrans_pattern($1, chfn_exec_t, chfn_t)
	files_search_usr($1)
	corecmd_search_bin($1)

	ifdef(`hide_broken_symptoms',`
		dontaudit chfn_t $1:socket_class_set rw_inherited_sock_file_perms;
	')
')

########################################
## <summary>
##	Execute a domain transition to
##	run Chfn and allow the
##	specified role the Chfn domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the Chfn domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`usermanage_run_chfn',`
	gen_require(`
		type chfn_t;
	')

	usermanage_domtrans_chfn($1)
	role $2 types chfn_t;
')

########################################
## <summary>
##	Execute a domain transition to
##	run Groupadd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`usermanage_domtrans_groupadd',`
	gen_require(`
		type groupadd_t, groupadd_exec_t;
	')

	domtrans_pattern($1, groupadd_exec_t, groupadd_t)
	files_search_usr($1)
	corecmd_search_bin($1)

	ifdef(`hide_broken_symptoms',`
		dontaudit groupadd_t $1:socket_class_set rw_inherited_sock_file_perms;
	')
')

########################################
## <summary>
##	Execute a domain transition to
##	run Groupadd and allow the
##	specified role the Groupadd domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the Groupadd
##	domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`usermanage_run_groupadd',`
	gen_require(`
		type groupadd_t;
	')

	usermanage_domtrans_groupadd($1)
	role $2 types groupadd_t;

	optional_policy(`
		nscd_run(groupadd_t, $2)
	')
')

########################################
## <summary>
##	Execute a domain transition to
##	run Passwd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`usermanage_domtrans_passwd',`
	gen_require(`
		type passwd_t, passwd_exec_t;
	')

	domtrans_pattern($1, passwd_exec_t, passwd_t)
	files_search_usr($1)
	corecmd_search_bin($1)

	ifdef(`hide_broken_symptoms',`
		dontaudit passwd_t $1:socket_class_set rw_inherited_sock_file_perms;
	')
')

########################################
## <summary>
##	Send kill signals to Passwd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`usermanage_kill_passwd',`
	gen_require(`
		type passwd_t;
	')

	allow $1 passwd_t:process sigkill;
')

########################################
## <summary>
##	Execute a domain transition to
##	run Passwd and allow the
##	specified role the Passwd domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the Passwd
##	domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`usermanage_run_passwd',`
	gen_require(`
		type passwd_t;
	')

	usermanage_domtrans_passwd($1)
	role $2 types passwd_t;
	auth_run_chk_passwd(passwd_t, $2)
')

########################################
## <summary>
##	Execute a domain transition to
##	run Admin Passwd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`usermanage_domtrans_admin_passwd',`
	gen_require(`
		type sysadm_passwd_t, admin_passwd_exec_t;
	')

	domtrans_pattern($1, admin_passwd_exec_t, sysadm_passwd_t)
	files_search_usr($1)
	corecmd_search_bin($1)
')

########################################
## <summary>
##	Execute a domain transition to
##	run Admin Passwd and allow the
##	specified role the Admin Passwd
##	domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the Admin
##	Passwd domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`usermanage_run_admin_passwd',`
	gen_require(`
		type sysadm_passwd_t;
	')

	usermanage_domtrans_admin_passwd($1)
	role $2 types sysadm_passwd_t;

	optional_policy(`
		nscd_run(sysadm_passwd_t, $2)
	')
')

########################################
## <summary>
##	Do not audit attempts to use
##	Useradd file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`usermanage_dontaudit_use_useradd_fds',`
	gen_require(`
		type useradd_t;
	')

	dontaudit $1 useradd_t:fd use;
')

########################################
## <summary>
##	Execute a domain transition to
##	run Useradd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`usermanage_domtrans_useradd',`
	gen_require(`
		type useradd_t, useradd_exec_t;
	')

	domtrans_pattern($1, useradd_exec_t, useradd_t)
	files_search_usr($1)
	corecmd_search_bin($1)

	ifdef(`hide_broken_symptoms',`
		dontaudit useradd_t $1:socket_class_set rw_inherited_sock_file_perms;
	')
')

########################################
## <summary>
##	Execute a domain transition to
##	run Useradd and allow the
##	specified role the Useradd domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the Useradd
##	domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`usermanage_run_useradd',`
	gen_require(`
		type useradd_t;
	')

	usermanage_domtrans_useradd($1)
	role $2 types useradd_t;

	userdom_manage_home_role($2, useradd_t)

	seutil_run_semanage(useradd_t, $2)

	optional_policy(`
		nscd_run(useradd_t, $2)
	')
')

########################################
## <summary>
##	Read crack database files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`usermanage_read_crack_db',`
	gen_require(`
		type crack_db_t;
	')

	read_files_pattern($1, crack_db_t, crack_db_t)
	files_search_etc($1)
')
