## <summary>Domains.</summary>

########################################
## <summary>
##	Make specified types usable as basic domains.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used as a basic domain type.
##	</summary>
## </param>
#
interface(`domain_base_type',`
	gen_require(`
		attribute domain;
	')

	typeattribute $1 domain;
')

########################################
## <summary>
##	Makes types usable as domains.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used as a domain type.
##	</summary>
## </param>
#
interface(`domain_type',`
	domain_base_type($1)

	ifdef(`distro_redhat',`
		optional_policy(`
			unconfined_use_fds($1)
		')
	')

	optional_policy(`
		init_sigchld($1)
		init_signull($1)
	')

	optional_policy(`
		rpm_use_fds($1)
		rpm_read_pipes($1)
	')

	optional_policy(`
		selinux_dontaudit_getattr_fs($1)
		selinux_dontaudit_read_fs($1)
	')

	optional_policy(`
		seutil_dontaudit_read_config($1)
	')
')

########################################
## <summary>
##	Make types usable as entrypoints
##	for specified domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to be entered.
##	</summary>
## </param>
## <param name="type">
##	<summary>
##	Type of program used for entering
##	the domain.
##	</summary>
## </param>
#
interface(`domain_entry_file',`
	gen_require(`
		attribute entry_type;
	')

	allow $1 $2:file entrypoint;
	allow $1 $2:file { mmap_file_perms ioctl lock };

	typeattribute $2 entry_type;

	corecmd_executable_file($2)
')

########################################
## <summary>
##	File descriptors for interactive use.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_interactive_fd',`
	gen_require(`
		attribute privfd;
	')

	typeattribute $1 privfd;
')

########################################
## <summary>
##	Perform dynamic transitions.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`domain_dyntrans_type',`
	gen_require(`
		attribute set_curr_context;
	')

	typeattribute $1 set_curr_context;
')

########################################
## <summary>
##	Exception to the constraint
##	preventing changing to then system user
##	identity and system role.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_system_change_exemption',`
	gen_require(`
		attribute can_system_change;
	')

	typeattribute $1 can_system_change;
')

########################################
## <summary>
##	Exception to the constraint preventing
##	changing of user identities.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_subj_id_change_exemption',`
	gen_require(`
		attribute can_change_process_identity;
	')

	typeattribute $1 can_change_process_identity;
')

########################################
## <summary>
##	Exception to the constraint preventing
##	changing of roles.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_role_change_exemption',`
	gen_require(`
		attribute can_change_process_role;
	')

	typeattribute $1 can_change_process_role;
')

########################################
## <summary>
##	Exception to the constraint preventing
##	changing the user identities in
##	object contexts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_obj_id_change_exemption',`
	gen_require(`
		attribute can_change_object_identity;
	')

	typeattribute $1 can_change_object_identity;
')

########################################
## <summary>
##	Domains target of
##	the user domain exception of the
##	SELinux role and identity change
##	constraints.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_user_exemption_target',`
	gen_require(`
		attribute process_user_target;
	')

	typeattribute $1 process_user_target;
')

########################################
## <summary>
##	Domains the source of
##	the cron domain exception of the
##	SELinux role and identity change
##	constraints.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_cron_exemption_source',`
	gen_require(`
		attribute cron_source_domain;
	')

	typeattribute $1 cron_source_domain;
')

########################################
## <summary>
##	Domains the target of
##	the cron domain exception of the
##	SELinux role and identity change
##	constraints.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_cron_exemption_target',`
	gen_require(`
		attribute cron_job_domain;
	')

	typeattribute $1 cron_job_domain;
')

########################################
## <summary>
##	Inherit and use file descriptors from
##	domains with interactive programs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_use_interactive_fds',`
	gen_require(`
		attribute privfd;
	')

	allow $1 privfd:fd use;
')

########################################
## <summary>
##	Do not audit attempts to inherit file
##	descriptors from domains with interactive
##	programs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_use_interactive_fds',`
	gen_require(`
		attribute privfd;
	')

	dontaudit $1 privfd:fd use;
')

########################################
## <summary>
##	Send child signals to domains whose file
##	discriptors are widely inheritable.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_sigchld_interactive_fds',`
	gen_require(`
		attribute privfd;
	')

	allow $1 privfd:process sigchld;
')

########################################
## <summary>
##	Set nice levels of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_setpriority_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process setsched;
')

########################################
## <summary>
##	Send general signals to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_signal_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process signal;
')

########################################
## <summary>
##	Send null signals to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_signull_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process signull;
')

########################################
## <summary>
##	Send stop signals to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_sigstop_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process sigstop;
')

########################################
## <summary>
##	Send child terminated signals to
##	all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_sigchld_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process sigchld;
')

########################################
## <summary>
##	Send kill signals to all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_kill_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process sigkill;
	allow $1 self:capability kill;
')

########################################
## <summary>
##	Search process state directories
##	of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_search_all_domains_state',`
	gen_require(`
		attribute domain;
	')

	kernel_search_proc($1)
	allow $1 domain:dir search_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search the
##	process state directories of all
##	domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_search_all_domains_state',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:dir search_dir_perms;
')

########################################
## <summary>
##	Read process states of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_read_all_domains_state',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:dir list_dir_perms;
	read_files_pattern($1, domain, domain)
	read_lnk_files_pattern($1, domain, domain)
	kernel_search_proc($1)
')

########################################
## <summary>
##	Get attributes of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getattr_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process getattr;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_domains',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:process getattr;
')

########################################
## <summary>
##	Read process states of all confined
##	domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_read_confined_domains_state',`
	gen_require(`
		attribute domain, unconfined_domain_type;
	')

	allow $1 { domain -unconfined_domain_type }:dir list_dir_perms;
	read_files_pattern($1, { domain -unconfined_domain_type }, { domain -unconfined_domain_type })
	read_lnk_files_pattern($1, { domain -unconfined_domain_type }, { domain -unconfined_domain_type })
	kernel_search_proc($1)

	dontaudit $1 unconfined_domain_type:dir search_dir_perms;
	dontaudit $1 unconfined_domain_type:file read_file_perms;
	dontaudit $1 unconfined_domain_type:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Get attributes of all confined domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getattr_confined_domains',`
	gen_require(`
		attribute domain, unconfined_domain_type;
	')

	allow $1 { domain -unconfined_domain_type }:process getattr;
')

########################################
## <summary>
##	Ptrace all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_ptrace_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process ptrace;
	allow domain $1:process sigchld;
')

########################################
## <summary>
##	Do not audit attempts to ptrace all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_ptrace_all_domains',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:process ptrace;
')

########################################
## <summary>
##	Do not audit attempts to ptrace confined domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_ptrace_confined_domains',`
	gen_require(`
		attribute domain, unconfined_domain_type;
	')

	dontaudit $1 { domain -unconfined_domain_type }:process ptrace;
')

########################################
## <summary>
##	Do not audit attempts to read process
##	states of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_read_all_domains_state',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:dir list_dir_perms;
	dontaudit $1 domain:lnk_file read_lnk_file_perms;
	dontaudit $1 domain:file read_file_perms;

	dontaudit $1 domain:sock_file read_sock_file_perms;
	dontaudit $1 domain:fifo_file read_fifo_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read
##	process state directories of all
##	domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_list_all_domains_state',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:dir list_dir_perms;
')

########################################
## <summary>
##	Get session IDs of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getsession_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process getsession;
')

########################################
## <summary>
##	Do not audit attempts to get
##	session IDs of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getsession_all_domains',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:process getsession;
')

########################################
## <summary>
##	Get process group IDs of all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getpgid_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process getpgid;
')

########################################
## <summary>
##	Get scheduler information of all
##	domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getsched_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:process getsched;
')

########################################
## <summary>
##	Get attributes of all domains
##	sockets, for all socket types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getattr_all_sockets',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:socket_class_set getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all domains sockets,
##	for all socket types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:socket_class_set getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all domains TCP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_tcp_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:tcp_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all domains UDP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_udp_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:udp_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read or
##	write all domains UDP sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_rw_all_udp_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:udp_socket rw_socket_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all domains IPSEC key
##	management sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_key_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:key_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all domains packet
##	sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_packet_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:packet_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all domains raw sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_raw_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:rawip_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read or write
##	all domains key sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_rw_all_key_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:key_socket rw_socket_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all domains unix datagram sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_dgram_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:unix_dgram_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Get attributes of all domains unix
##	stream sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getattr_all_stream_sockets',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:unix_stream_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all domains unix stream sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_stream_sockets',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:unix_stream_socket getattr_sock_file_perms;
')

########################################
## <summary>
##	Get attributes of all domains
##	pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getattr_all_pipes',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:fifo_file getattr_fifo_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all domains pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_getattr_all_pipes',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:fifo_file getattr_fifo_file_perms;
')

########################################
## <summary>
##	Set contexts of all domains IPSEC
##	associations.
## </summary>
## <param name="type">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_ipsec_setcontext_all_domains',`
	gen_require(`
		attribute domain;
	')

	allow $1 domain:association setcontext;
')

########################################
## <summary>
##	Get attributes of entrypoint
##	files for all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_getattr_all_entry_files',`
	gen_require(`
		attribute entry_type;
	')

	allow $1 entry_type:lnk_file read_lnk_file_perms;
	allow $1 entry_type:file getattr;
')

########################################
## <summary>
##	Read entrypoint files for all domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_read_all_entry_files',`
	gen_require(`
		attribute entry_type;
	')

	allow $1 entry_type:lnk_file read_lnk_file_perms;
	allow $1 entry_type:file read_file_perms;
')

########################################
## <summary>
##	Execute entrypoint files for all
##	domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_exec_all_entry_files',`
	gen_require(`
		attribute entry_type;
	')

	can_exec($1, entry_type)
')

########################################
## <summary>
##	Do not audit checking for execute on
##	all entry point files
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_exec_all_entry_files',`
	gen_require(`
		attribute entry_type;
	')

	dontaudit $1 entry_type:file exec_file_perms;
')

########################################
## <summary>
##	Manage entrypoint files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_manage_all_entry_files',`
	gen_require(`
		attribute entry_type;
	')

	allow $1 entry_type:file manage_file_perms;
')

########################################
## <summary>
##	Relabel entrypoint file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_relabel_all_entry_files',`
	gen_require(`
		attribute entry_type;
	')

	allow $1 entry_type:file relabel_file_perms;
')

########################################
## <summary>
##	Mmap all entrypoint files as executables.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_mmap_all_entry_files',`
	gen_require(`
		attribute entry_type;
	')

	allow $1 entry_type:file mmap_file_perms;
')

########################################
## <summary>
##	Execute entry_types in the
##	specified domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to transition.
##	</summary>
## </param>
## <param name="target_domain">
##	<summary>
##	The type of the new process.
##	</summary>
## </param>
#
interface(`domain_entry_file_spec_domtrans',`
	gen_require(`
		attribute entry_type;
	')

	domain_transition_pattern($1, entry_type, $2)
')

########################################
## <summary>
##	Ability to mmap a low area of the
##	address space, as configured by
##	/proc/sys/kernel/mmap_min_addr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_mmap_low_type',`
	gen_require(`
		attribute mmap_low_domain_type;
	')

	typeattribute $1 mmap_low_domain_type;
')

########################################
## <summary>
##	Ability to mmap a low area of the
##	address space, as configured by
##	/proc/sys/kernel/mmap_min_addr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_mmap_low',`

	allow $1 self:memprotect mmap_zero;
')

########################################
## <summary>
##	Receive labeled networking packets
##	from all domains, over all protocols.
## </summary>
## <param name="type">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_all_recvfrom_all_domains',`
	gen_require(`
		attribute domain;
 	')

	corenet_all_recvfrom_labeled($1, domain)
')

########################################
## <summary>
##	Send generic signals to unconfined
##	domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_unconfined_signal',`
	gen_require(`
		attribute unconfined_domain_type;
	')

	allow $1 unconfined_domain_type:process signal;
')

########################################
## <summary>
##	Polyinstatiated access to domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_poly',`
	gen_require(`
		attribute polydomain;
	')

	typeattribute $1 polydomain;
')

########################################
## <summary>
##	Unconfined access to domains.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`domain_unconfined',`
	gen_require(`
		attribute set_curr_context;
		attribute can_change_object_identity;
		attribute unconfined_domain_type;
		attribute process_uncond_exempt;
	')

	typeattribute $1 unconfined_domain_type;
	typeattribute $1 can_change_object_identity;
	typeattribute $1 set_curr_context;
	typeattribute $1 process_uncond_exempt;
')

########################################
## <summary>
##	Do not audit attempts to read or write
##	all leaked sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`domain_dontaudit_leaks',`
	gen_require(`
		attribute domain;
	')

	dontaudit $1 domain:socket_class_set rw_inherited_sock_file_perms;
')
