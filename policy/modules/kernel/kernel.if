## <summary>kernel threads, proc filesystem and unlabeled processes and objects.</summary>

########################################
## <summary>
##	Start userland processes by
##	transitioning to specified domains.
## </summary>
## <param name="domain">
##	<summary>
##	The process type entered by kernel.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The entryfile executable type.
##	</summary>
## </param>
#
interface(`kernel_domtrans_to',`
	gen_require(`
		type kernel_t;
	')

	domtrans_pattern(kernel_t, $2, $1)
')

########################################
## <summary>
##	Start userland processes by
##	transitioning to specified domains,
##	with a range transition.
## </summary>
## <param name="domain">
##	<summary>
##	The process type entered by kernel.
##	</summary>
## </param>
## <param name="entrypoint">
##	<summary>
##	The entryfile executable type.
##	</summary>
## </param>
## <param name="range">
##	<summary>
##	Range for the domain.
##	</summary>
## </param>
#
interface(`kernel_ranged_domtrans_to',`
	gen_require(`
		type kernel_t;
	')

	kernel_domtrans_to($1, $2)

	ifdef(`enable_mcs',`
		range_transition kernel_t $2:process $3;
	')

	ifdef(`enable_mls',`
		range_transition kernel_t $2:process $3;
		mls_rangetrans_target($1)
	')
')

########################################
## <summary>
##	Allows the kernel to mount
##	filesystems on specified directory
##	types.
## </summary>
## <param name="directory_type">
##	<summary>
##	The type of the directory to use as a mountpoint.
##	</summary>
## </param>
#
interface(`kernel_rootfs_mountpoint',`
	gen_require(`
		type kernel_t;
	')

	allow kernel_t $1:dir mounton;
')

########################################
## <summary>
##	Set process groups of kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_setpgid',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:process setpgid;
')

########################################
## <summary>
##	Set priorities of kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_setsched',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:process setsched;
')

########################################
## <summary>
##	Send child signals to kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_sigchld',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:process sigchld;
')

########################################
## <summary>
##	Send kill signals to kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_kill',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:process sigkill;
')

########################################
## <summary>
##	Send generic signals to kernel threads.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_signal',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:process signal;
')

########################################
## <summary>
##	Allows the kernel to share state
##	information with the caller.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_share_state',`
	gen_require(`
		type kernel_t;
	')

	allow kernel_t $1:process share;
')

########################################
## <summary>
##	Use kernel file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_use_fds',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:fd use;
')

########################################
## <summary>
##	Do not audit attempts to use
##	kernel file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_use_fds',`
	gen_require(`
		type kernel_t;
	')

	dontaudit $1 kernel_t:fd use;
')

########################################
## <summary>
##	Read and write kernel pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_pipes',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:fifo_file rw_fifo_file_perms;
')

########################################
## <summary>
##	Read and write kernel unix datagram
##	sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_unix_dgram_sockets',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:unix_dgram_socket rw_socket_perms;
')

########################################
## <summary>
##	Send messages to kernel unix
##	datagram sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_dgram_send',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:unix_dgram_socket sendto;
')

########################################
## <summary>
##	Receive messages from kernel TCP sockets. (Deprecated)
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_tcp_recvfrom',`
	refpolicywarn(`$0($*) has been deprecated.')
')

########################################
## <summary>
##	Send UDP network traffic to the kernel. (Deprecated)
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_udp_send',`
	refpolicywarn(`$0($*) has been deprecated.')
')

########################################
## <summary>
##	Receive messages from kernel UDP sockets. (Deprecated)
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_udp_recvfrom',`
	refpolicywarn(`$0($*) has been deprecated.')
')

########################################
## <summary>
##	Load kernel modules.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_load_module',`
	gen_require(`
		attribute can_load_kernmodule;
	')

	allow $1 self:capability sys_module;
	typeattribute $1 can_load_kernmodule;

	allow $1 self:capability sys_nice;
	kernel_setsched($1)
')

########################################
## <summary>
##	Search kernel key ring.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_search_key',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:key search;
')

########################################
## <summary>
##	Do not audit attempts to search
##	kernel key ring.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_search_key',`
	gen_require(`
		type kernel_t;
	')

	dontaudit $1 kernel_t:key search;
')

########################################
## <summary>
##	Link to kernel key ring.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_link_key',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:key link;
')

########################################
## <summary>
##	Do not audit attempts to link
##	kernel key ring.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_link_key',`
	gen_require(`
		type kernel_t;
	')

	dontaudit $1 kernel_t:key link;
')

########################################
## <summary>
##	Read ring buffer.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_ring_buffer',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:system syslog_read;
')

########################################
## <summary>
##	Do not audit attempts to read ring buffer.
## </summary>
## <param name="domain">
##	<summary>
##	The domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_read_ring_buffer',`
	gen_require(`
		type kernel_t;
	')

	dontaudit $1 kernel_t:system syslog_read;
')

########################################
## <summary>
##	Change the level of kernel messages
##	logged to the console.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_change_ring_buffer_level',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:system syslog_console;
')

########################################
## <summary>
##	Clear the ring buffer.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_clear_ring_buffer',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:system syslog_mod;
')

########################################
## <summary>
##	Request kernel to load modules.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_request_load_module',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:system module_request;
')

########################################
## <summary>
##	Do not audit attempts to request
##	kernel to load modules.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_request_load_module',`
	gen_require(`
		type kernel_t;
	')

	dontaudit $1 kernel_t:system module_request;
')

########################################
## <summary>
##	Get information on all System V IPC
##	objects.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_get_sysvipc_info',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:system ipc_info;
')

########################################
## <summary>
##	Get attributes of kernel debugging
##	filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_getattr_debugfs',`
	gen_require(`
		type debugfs_t;
	')

	allow $1 debugfs_t:filesystem getattr;
')

########################################
## <summary>
##	Mount kernel debugging filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_mount_debugfs',`
	gen_require(`
		type debugfs_t;
	')

	allow $1 debugfs_t:filesystem mount;
')

########################################
## <summary>
##	Unmount kernel debugging filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_unmount_debugfs',`
	gen_require(`
		type debugfs_t;
	')

	allow $1 debugfs_t:filesystem unmount;
')

########################################
## <summary>
##	Remount kernel debugging filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_remount_debugfs',`
	gen_require(`
		type debugfs_t;
	')

	allow $1 debugfs_t:filesystem remount;
')

########################################
## <summary>
##	Search debugfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_search_debugfs',`
	gen_require(`
		type debugfs_t;
	')

	search_dirs_pattern($1, debugfs_t, debugfs_t)
')

########################################
## <summary>
##	Do not audit attempts to search
##	debugfs directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_search_debugfs',`
	gen_require(`
		type debugfs_t;
	')

	dontaudit $1 debugfs_t:dir search_dir_perms;
')

########################################
## <summary>
##	Read dbugfs content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_debugfs',`
	gen_require(`
		type debugfs_t;
	')

	read_files_pattern($1, debugfs_t, debugfs_t)
	read_lnk_files_pattern($1, debugfs_t, debugfs_t)
	list_dirs_pattern($1, debugfs_t, debugfs_t)
')

########################################
## <summary>
##	Mount kernel VM filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_mount_kvmfs',`
	gen_require(`
		type kvmfs_t;
	')

	allow $1 kvmfs_t:filesystem mount;
')

########################################
## <summary>
##	Unmount proc filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_unmount_proc',`
	gen_require(`
		type proc_t;
	')

	allow $1 proc_t:filesystem unmount;
')

########################################
## <summary>
##	Get attributes of proc filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_getattr_proc',`
	gen_require(`
		type proc_t;
	')

	allow $1 proc_t:filesystem getattr;
')

########################################
## <summary>
##	Search proc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_search_proc',`
	gen_require(`
		type proc_t;
	')

	search_dirs_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	List proc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_list_proc',`
	gen_require(`
		type proc_t;
	')

	list_dirs_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	Do not audit attempts to list proc
## 	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_list_proc',`
	gen_require(`
		type proc_t;
	')

	dontaudit $1 proc_t:dir list_dir_perms;
')

########################################
## <summary>
##	Get attributes of proc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_getattr_proc_files',`
	gen_require(`
		type proc_t;
	')

	getattr_files_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	Read generic proc symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_proc_symlinks',`
	gen_require(`
		type proc_t;
	')

	read_lnk_files_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	Read proc content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_system_state',`
	gen_require(`
		type proc_t;
	')

	read_files_pattern($1, proc_t, proc_t)
	read_lnk_files_pattern($1, proc_t, proc_t)
	list_dirs_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	Write proc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_write_proc_files',`
	gen_require(`
		type proc_t;
	')

	write_files_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	Do not audit attempts to read proc
##	files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_read_system_state',`
	gen_require(`
		type proc_t;
	')

	dontaudit $1 proc_t:file read_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read proc
##	symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_read_proc_symlinks',`
	gen_require(`
		type proc_t;
	')

	dontaudit $1 proc_t:lnk_file read_lnk_file_perms;
')

#######################################
## <summary>
##	Read and write proc afs files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_afs_state',`
	gen_require(`
		type proc_t, proc_afs_t;
	')

	list_dirs_pattern($1, proc_t, proc_t)
	rw_files_pattern($1, proc_afs_t, proc_afs_t)
')

#######################################
## <summary>
##	Read proc mdstat files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_software_raid_state',`
	gen_require(`
		type proc_t, proc_mdstat_t;
	')

	read_files_pattern($1, proc_t, proc_mdstat_t)
	list_dirs_pattern($1, proc_t, proc_t)
')

#######################################
## <summary>
##	Read and write proc mdstat files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_software_raid_state',`
	gen_require(`
		type proc_t, proc_mdstat_t;
	')

	rw_files_pattern($1, proc_t, proc_mdstat_t)
	list_dirs_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	Get attributes of proc kcore files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_getattr_core_if',`
	gen_require(`
		type proc_t, proc_kcore_t;
	')

	getattr_files_pattern($1, proc_t, proc_kcore_t)
	list_dirs_pattern($1, proc_t, proc_t)
')

########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of proc kcore files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_core_if',`
	gen_require(`
		type proc_kcore_t;
	')

	dontaudit $1 proc_kcore_t:file getattr_file_perms;
')

########################################
## <summary>
##	Read core kernel interface.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_core_if',`
	gen_require(`
		type proc_t, proc_kcore_t;
		attribute can_dump_kernel;
	')

	allow $1 self:capability sys_rawio;
	read_files_pattern($1, proc_t, proc_kcore_t)
	list_dirs_pattern($1, proc_t, proc_t)

	typeattribute $1 can_dump_kernel;
')

########################################
## <summary>
##	Read kernel messages
##	using the proc kmsg interface.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_messages',`
	gen_require(`
		attribute can_receive_kernel_messages;
		type proc_kmsg_t, proc_t;
	')

	read_files_pattern($1, proc_t, proc_kmsg_t)

	typeattribute $1 can_receive_kernel_messages;
')

########################################
## <summary>
##	Get attributes of proc kmsg files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_getattr_message_if',`
	gen_require(`
		type proc_kmsg_t, proc_t;
	')

	getattr_files_pattern($1, proc_t, proc_kmsg_t)
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of proc kmesg files.
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_message_if',`
	gen_require(`
		type proc_kmsg_t, proc_t;
	')

	dontaudit $1 proc_kmsg_t:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to search
##	proc net directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_search_network_state',`
	gen_require(`
		type proc_net_t;
	')

	dontaudit $1 proc_net_t:dir search_dir_perms;
')

########################################
## <summary>
##	Search proc net directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_search_network_state',`
	gen_require(`
		type proc_net_t;
	')

	search_dirs_pattern($1, proc_t, proc_net_t)
')

########################################
## <summary>
##	Read proc net content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_network_state',`
	gen_require(`
		type proc_t, proc_net_t;
	')

	read_files_pattern($1, { proc_t proc_net_t }, proc_net_t)
	read_lnk_files_pattern($1, { proc_t proc_net_t }, proc_net_t)
	list_dirs_pattern($1, proc_t, proc_net_t)
')

########################################
## <summary>
##	Read proc net symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_network_state_symlinks',`
	gen_require(`
		type proc_t, proc_net_t;
	')

	read_lnk_files_pattern($1, { proc_t proc_net_t }, proc_net_t)
	list_dirs_pattern($1, proc_t, proc_net_t)
')

########################################
## <summary>
##	Search proc xen directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_search_xen_state',`
	gen_require(`
		type proc_t, proc_xen_t;
	')

	search_dirs_pattern($1, proc_t, proc_xen_t)
')

########################################
## <summary>
##	Do not audit attempts to search
##	proc xen directories
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_search_xen_state',`
	gen_require(`
		type proc_xen_t;
	')

	dontaudit $1 proc_xen_t:dir search_dir_perms;
')

########################################
## <summary>
##	Read proc xen content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_xen_state',`
	gen_require(`
		type proc_t, proc_xen_t;
	')

	read_files_pattern($1, { proc_t proc_xen_t }, proc_xen_t)
	read_lnk_files_pattern($1, { proc_t proc_xen_t }, proc_xen_t)
	list_dirs_pattern($1, proc_t, proc_xen_t)
')

########################################
## <summary>
##	Read proc xen symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_xen_state_symlinks',`
	gen_require(`
		type proc_t, proc_xen_t;
	')

	read_lnk_files_pattern($1, { proc_t proc_xen_t }, proc_xen_t)
	list_dirs_pattern($1, proc_t, proc_xen_t)
')

########################################
## <summary>
##	Write proc xen files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_write_xen_state',`
	gen_require(`
		type proc_t, proc_xen_t;
	')

	write_files_pattern($1, { proc_t proc_xen_t }, proc_xen_t)
')

########################################
## <summary>
##	list all proc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_list_all_proc',`
	gen_require(`
		attribute proc_type;
	')

	allow $1 proc_type:dir list_dir_perms;
	allow $1 proc_type:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to list all
##	proc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_list_all_proc',`
	gen_require(`
		attribute proc_type;
	')

	dontaudit $1 proc_type:dir list_dir_perms;
	dontaudit $1 proc_type:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to search
##	sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_search_sysctl',`
	gen_require(`
		type sysctl_t;
	')

	dontaudit $1 sysctl_t:dir search_dir_perms;
')

########################################
## <summary>
##	Read sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_sysctl',`
	gen_require(`
		type sysctl_t, proc_t;
	')

	list_dirs_pattern($1, proc_t, sysctl_t)
	read_files_pattern($1, sysctl_t, sysctl_t)
')

########################################
## <summary>
##	Read device sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_device_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_dev_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_dev_t }, sysctl_dev_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_dev_t)
')

########################################
## <summary>
##	Read and write device sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_device_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_dev_t;
	')

	rw_files_pattern($1, { proc_t sysctl_t sysctl_dev_t }, sysctl_dev_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_dev_t)
')

########################################
## <summary>
##	Search virtual memory sysctl
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_search_vm_sysctl',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_vm_t;
	')

	search_dirs_pattern($1, { proc_t sysctl_t }, sysctl_vm_t)
')

########################################
## <summary>
##	Read virtual memory sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_vm_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_vm_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_vm_t }, sysctl_vm_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_vm_t)
')

########################################
## <summary>
##	Read and write virtual memory
##	sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_vm_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_vm_t;
	')

	rw_files_pattern($1 ,{ proc_t sysctl_t sysctl_vm_t }, sysctl_vm_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_vm_t)

	allow $1 sysctl_vm_t:dir write;
')

########################################
## <summary>
##	Search network sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_search_network_sysctl',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_net_t;
	')

	search_dirs_pattern($1, { proc_t sysctl_t }, sysctl_net_t)
')

########################################
## <summary>
##	Do not audit attempts to search
##	network sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_search_network_sysctl',`
	gen_require(`
		type sysctl_net_t;
	')

	dontaudit $1 sysctl_net_t:dir search_dir_perms;
')

########################################
## <summary>
##	Read network sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_net_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_net_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_net_t }, sysctl_net_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_net_t)
')

########################################
## <summary>
##	Read and write network sysctl
##	network files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_net_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_net_t;
	')

	rw_files_pattern($1, { proc_t sysctl_t sysctl_net_t }, sysctl_net_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_net_t)
')

########################################
## <summary>
##	Read unix domain socket sysctl
##	content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_unix_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_net_t, sysctl_net_unix_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_net_t }, sysctl_net_unix_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_net_t)
')

########################################
## <summary>
##	Read and write unix domain
##	socket sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_unix_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_net_t, sysctl_net_unix_t;
	')

	rw_files_pattern($1, { proc_t sysctl_t sysctl_net_t }, sysctl_net_unix_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_net_t)
')

########################################
## <summary>
##	Read hotplug sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_hotplug_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_kernel_t, sysctl_hotplug_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_kernel_t }, sysctl_hotplug_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_kernel_t)
')

########################################
## <summary>
##	Read and write hotplug sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_hotplug_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_kernel_t, sysctl_hotplug_t;
	')

	rw_files_pattern($1, { proc_t sysctl_t sysctl_kernel_t }, sysctl_hotplug_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_kernel_t)
')

########################################
## <summary>
##	Read modprobe sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_modprobe_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_kernel_t, sysctl_modprobe_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_kernel_t }, sysctl_modprobe_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_kernel_t)
')

########################################
## <summary>
##	Read and write modprobe sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_modprobe_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_kernel_t, sysctl_modprobe_t;
	')

	rw_files_pattern($1, { proc_t sysctl_t sysctl_kernel_t }, sysctl_modprobe_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_kernel_t)
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic kernel sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_search_kernel_sysctl',`
	gen_require(`
		type sysctl_kernel_t;
	')

	dontaudit $1 sysctl_kernel_t:dir search_dir_perms;
')

########################################
## <summary>
##	Read generic crypto sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_crypto_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_crypto_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_crypto_t }, sysctl_crypto_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_crypto_t)
')

########################################
## <summary>
##	Read general kernel sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_kernel_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_kernel_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_kernel_t }, sysctl_kernel_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_kernel_t)
')

########################################
## <summary>
##	Do not audit attempts to write
##	generic kernel sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_write_kernel_sysctl',`
	gen_require(`
		type sysctl_kernel_t;
	')

	dontaudit $1 sysctl_kernel_t:file write_file_perms;
')

########################################
## <summary>
##	Read and write generic kernel
##	sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_kernel_sysctl',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_kernel_t;
	')

	rw_files_pattern($1, { proc_t sysctl_t sysctl_kernel_t }, sysctl_kernel_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_kernel_t)
')

########################################
## <summary>
##	Read filesystem sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_fs_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_fs_t;
	')

	read_files_pattern($1, { proc_t sysctl_t sysctl_fs_t }, sysctl_fs_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_fs_t)
')

########################################
## <summary>
##	Read and write fileystem sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_fs_sysctls',`
	gen_require(`
		type proc_t, sysctl_t, sysctl_fs_t;
	')

	rw_files_pattern($1, { proc_t sysctl_t sysctl_fs_t }, sysctl_fs_t)
	list_dirs_pattern($1, { proc_t sysctl_t }, sysctl_fs_t)
')

########################################
## <summary>
##	Read IRQ sysctls content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_irq_sysctls',`
	gen_require(`
		type proc_t, sysctl_irq_t;
	')

	read_files_pattern($1, { proc_t sysctl_irq_t }, sysctl_irq_t)
	list_dirs_pattern($1, proc_t, sysctl_irq_t)
')

########################################
## <summary>
##	Read and write IRQ sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_irq_sysctls',`
	gen_require(`
		type proc_t, sysctl_irq_t;
	')

	rw_files_pattern($1, { proc_t sysctl_irq_t }, sysctl_irq_t)
	list_dirs_pattern($1, proc_t, sysctl_irq_t)
')

########################################
## <summary>
##	Read RPC sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_rpc_sysctls',`
	gen_require(`
		type proc_t, proc_net_t, sysctl_rpc_t;
	')

	read_files_pattern($1, { proc_t proc_net_t sysctl_rpc_t }, sysctl_rpc_t)
	list_dirs_pattern($1, { proc_t proc_net_t }, sysctl_rpc_t)
')

########################################
## <summary>
##	Read and write RPC sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_rpc_sysctls',`
	gen_require(`
		type proc_t, proc_net_t, sysctl_rpc_t;
	')

	rw_files_pattern($1, { proc_t proc_net_t sysctl_rpc_t }, sysctl_rpc_t)
	list_dirs_pattern($1, { proc_t proc_net_t }, sysctl_rpc_t)
')

########################################
## <summary>
##	Do not audit attempts to list all
##	sysctl directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_list_all_sysctls',`
	gen_require(`
		attribute sysctl_type;
	')

	dontaudit $1 sysctl_type:dir list_dir_perms;
	dontaudit $1 sysctl_type:file read_file_perms;
')

########################################
## <summary>
##	Read all sysctl content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_all_sysctls',`
	gen_require(`
		attribute sysctl_type;
		type proc_t, proc_net_t;
	')

	read_files_pattern($1, { proc_t proc_net_t sysctl_type }, sysctl_type)
	list_dirs_pattern($1, { proc_t proc_net_t }, sysctl_type)
')

########################################
## <summary>
##	Read and write all sysctl files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_all_sysctls',`
	gen_require(`
		attribute sysctl_type;
		type proc_t, proc_net_t;
	')

	rw_files_pattern($1, { proc_t proc_net_t sysctl_type }, sysctl_type)

	allow $1 sysctl_type:dir list_dir_perms;
	allow $1 sysctl_type:file setattr_file_perms;
')

########################################
## <summary>
##	Send kill signals to unlabeled processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_kill_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:process sigkill;
')

########################################
## <summary>
##	Mount unlabeled filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_mount_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:filesystem mount;
')

########################################
## <summary>
##	Unmount unlabeled filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_unmount_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:filesystem unmount;
')

########################################
## <summary>
##	Send general signals to unlabeled
##	processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_signal_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:process signal;
')

########################################
## <summary>
##	Send null signals to unlabeled
##	processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_signull_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:process signull;
')

########################################
## <summary>
##	Send stop signals to unlabeled
##	processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_sigstop_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:process sigstop;
')

########################################
## <summary>
##	Send child signals to unlabeled
##	processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_sigchld_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:process sigchld;
')

########################################
## <summary>
##	List unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_list_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:dir list_dir_perms;
')

########################################
## <summary>
##	Read unlabeled state content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_unlabeled_state',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:dir list_dir_perms;
	read_files_pattern($1, unlabeled_t, unlabeled_t)
	read_lnk_files_pattern($1, unlabeled_t, unlabeled_t)
')

########################################
## <summary>
##	Do not audit attempts to list
##	unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_list_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:dir list_dir_perms;
')

########################################
## <summary>
##	Read and write unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_unlabeled_dirs',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:dir rw_dir_perms;
')

########################################
## <summary>
##	Read and write unlabeled files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_unlabeled_files',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:file rw_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of unlabeled files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_unlabeled_files',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to
##	read unlabeled files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_read_unlabeled_files',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:file read_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of unlabeled symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_unlabeled_symlinks',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:lnk_file getattr_lnk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of unlabeled pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_unlabeled_pipes',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:fifo_file getattr_fifo_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of unlabeled sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_unlabeled_sockets',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:sock_file getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of unlabeled block devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_unlabeled_blk_files',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:blk_file getattr_blk_file_perms;
')

########################################
## <summary>
##	Read and write unlabeled block
##	devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_rw_unlabeled_blk_files',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:blk_file rw_blk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes of
##	unlabeled character devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_getattr_unlabeled_chr_files',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:chr_file getattr_chr_file_perms;
')

########################################
## <summary>
##	Relabel from unlabeled directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_relabelfrom_unlabeled_dirs',`
	gen_require(`
		type unlabeled_t;
	')
	
	kernel_list_unlabeled($1)
	allow $1 unlabeled_t:dir { getattr_dir_perms relabelfrom_dir_perms };
')

########################################
## <summary>
##	Relabel from unlabeled files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_relabelfrom_unlabeled_files',`
	gen_require(`
		type unlabeled_t;
	')

	kernel_list_unlabeled($1)
	allow $1 unlabeled_t:file { getattr_file_perms relabelfrom_file_perms };
')

########################################
## <summary>
##	Relabel from unlabeled symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_relabelfrom_unlabeled_symlinks',`
	gen_require(`
		type unlabeled_t;
	')

	kernel_list_unlabeled($1)
	allow $1 unlabeled_t:lnk_file { getattr_lnk_file_perms relabelfrom_lnk_file_perms };
')

########################################
## <summary>
##	Relabel from unlabeled pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_relabelfrom_unlabeled_pipes',`
	gen_require(`
		type unlabeled_t;
	')

	kernel_list_unlabeled($1)
	allow $1 unlabeled_t:fifo_file { getattr_fifo_file_perms relabelfrom_fifo_file_perms };
')

########################################
## <summary>
##	Relabel from unlabeled sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_relabelfrom_unlabeled_sockets',`
	gen_require(`
		type unlabeled_t;
	')

	kernel_list_unlabeled($1)
	allow $1 unlabeled_t:sock_file { getattr_sock_file_perms relabelfrom_sock_file_perms };
')

########################################
## <summary>
##	Send and receive messages from
##	unlabeled IPSEC associations.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_sendrecv_unlabeled_association',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:association { sendto recvfrom };
	allow $1 unlabeled_t:packet { send recv };
')

########################################
## <summary>
##	Do not audit attempts to send and receive messages
##	from unlabeled IPSEC associations.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_sendrecv_unlabeled_association',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:association { sendto recvfrom };
')

########################################
## <summary>
##	Receive TCP packets from unlabeled
##	connections.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_tcp_recvfrom_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:tcp_socket recvfrom;
')

########################################
## <summary>
##	Do not audit attempts to receive
##	TCP packets from unlabeled
##	connections.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_tcp_recvfrom_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:tcp_socket recvfrom;
')

########################################
## <summary>
##	Receive UDP packets from unlabeled
##	connections.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_udp_recvfrom_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:udp_socket recvfrom;
')

########################################
## <summary>
##	Do not audit attempts to receive
##	UDP packets from unlabeled
##	connections.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_udp_recvfrom_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:udp_socket recvfrom;
')

########################################
## <summary>
##	Receive Raw IP packets from
##	unlabeled connections.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_raw_recvfrom_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:rawip_socket recvfrom;
')

########################################
## <summary>
##	Do not audit attempts to receive
##	Raw IP packets from unlabeled
##	connections.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_raw_recvfrom_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:rawip_socket recvfrom;
')

########################################
## <summary>
##	Send and receive unlabeled packets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_sendrecv_unlabeled_packets',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:packet { send recv };
')

########################################
## <summary>
##	Receive packets from unlabeled peers.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_recvfrom_unlabeled_peer',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:peer recv;
')

########################################
## <summary>
##	Do not audit attempts to receive
##	packets from unlabeled peers.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`kernel_dontaudit_recvfrom_unlabeled_peer',`
	gen_require(`
		type unlabeled_t;
	')

	dontaudit $1 unlabeled_t:peer recv;
')

########################################
## <summary>
##	Relabel from unlabeled database objects.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_relabelfrom_unlabeled_database',`
	gen_require(`
		type unlabeled_t;
		class db_database { setattr relabelfrom };
		class db_table { setattr relabelfrom };
		class db_procedure { setattr relabelfrom };
		class db_column { setattr relabelfrom };
		class db_tuple { update relabelfrom };
		class db_blob { setattr relabelfrom };
	')

	allow $1 unlabeled_t:db_database { setattr relabelfrom };
	allow $1 unlabeled_t:db_table { setattr relabelfrom };
	allow $1 unlabeled_t:db_procedure { setattr relabelfrom };
	allow $1 unlabeled_t:db_column { setattr relabelfrom };
	allow $1 unlabeled_t:db_tuple { update relabelfrom };
	allow $1 unlabeled_t:db_blob { setattr relabelfrom };
')

########################################
## <summary>
##	Relabel to unlabeled contexts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_relabelto_unlabeled',`
	gen_require(`
		type unlabeled_t;
	')

	allow $1 unlabeled_t:dir_file_class_set relabelto;
')

########################################
## <summary>
##	Unconfined access to kernel module
##	resources.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_unconfined',`
	gen_require(`
		attribute kern_unconfined;
	')

	typeattribute $1 kern_unconfined;
')

########################################
## <summary>
##	Connect to kernel with unix sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_stream_connect',`
	gen_require(`
		type kernel_t;
	')

	allow $1 kernel_t:unix_stream_socket connectto;
')
