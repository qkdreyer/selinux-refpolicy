## <summary>kernel security interface, in particular, selinuxfs.</summary>

########################################
## <summary>
##	Make the specified type used for labeling SELinux Booleans.
##	This interface is only usable in the base module.
## </summary>
## <param name="type">
##	<summary>
##	Type used for labeling a Boolean.
##	</summary>
## </param>
## <param name="boolean">
##	<summary>
##	Name of the Boolean.
##	</summary>
## </param>
#
interface(`selinux_labeled_boolean',`
	gen_require(`
		attribute boolean_type;
	')

	typeattribute $1 boolean_type;

	# because of this statement, any module which
	# calls this interface must be in the base module:
	# genfscon selinuxfs /booleans/$2 gen_context(system_u:object_r:$1,s0)
')

########################################
## <summary>
##	Get the mountpoint of the selinuxfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_get_fs_mount',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:filesystem getattr;
	kernel_read_system_state($1)
')

########################################
## <summary>
##	Do not audit attempts to get the mountpoint
##	of the selinuxfs filesystem.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`selinux_dontaudit_get_fs_mount',`
	gen_require(`
		type security_t;
	')

	dontaudit $1 security_t:filesystem getattr;
	kernel_dontaudit_read_system_state($1)
')

########################################
## <summary>
##	Get the attributes of the selinuxfs filesystem
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_getattr_fs',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:filesystem getattr;
')

########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of the selinuxfs filesystem
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`selinux_dontaudit_getattr_fs',`
	gen_require(`
		type security_t;
	')

	dontaudit $1 security_t:filesystem getattr;
')

########################################
## <summary>
##	Do not audit attempts to get the
##	attributes of the selinuxfs directory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`selinux_dontaudit_getattr_dir',`
	gen_require(`
		type security_t;
	')

	dontaudit $1 security_t:dir getattr;
')

########################################
## <summary>
##	Search selinuxfs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_search_fs',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:dir search_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search selinuxfs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`selinux_dontaudit_search_fs',`
	gen_require(`
		type security_t;
	')

	dontaudit $1 security_t:dir search_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to read
##	generic selinuxfs entries
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`selinux_dontaudit_read_fs',`
	gen_require(`
		type security_t;
	')

	selinux_dontaudit_getattr_fs($1)
	dontaudit $1 security_t:dir search_dir_perms;
	dontaudit $1 security_t:file read_file_perms;
')

########################################
## <summary>
##	Get the mode of policy enforcement
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_get_enforce_mode',`
	gen_require(`
		type security_t;
	')

	selinux_get_fs_mount($1)
	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file read_file_perms;
')

########################################
## <summary>
##	Set the mode of policy enforcement.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_set_enforce_mode',`
	gen_require(`
		type security_t;
		attribute can_setenforce;
		bool secure_mode_policyload;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	typeattribute $1 can_setenforce;

	if(!secure_mode_policyload) {
		allow $1 security_t:security setenforce;

		ifdef(`distro_rhel4',`
			# needed for systems without audit support
			auditallow $1 security_t:security setenforce;
		')
	}
')

########################################
## <summary>
##	Load the policy into the kernel.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_load_policy',`
	gen_require(`
		type security_t;
		attribute can_load_policy;
		bool secure_mode_policyload;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	typeattribute $1 can_load_policy;

	if(!secure_mode_policyload) {
		allow $1 security_t:security load_policy;

		ifdef(`distro_rhel4',`
			# needed for systems without audit support
			auditallow $1 security_t:security load_policy;
		')
	}
')

########################################
## <summary>
##	Set the state of Booleans to
##	enable or disable conditional portions of the policy.  (Deprecated)
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_set_boolean',`
	refpolicywarn(`$0($*) has been deprecated, use selinux_set_generic_booleans() instead.')
	selinux_set_generic_booleans($1)
')

########################################
## <summary>
##	Sset the state of generic Booleans to
##	enable or disable conditional portions of the policy.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_set_generic_booleans',`
	gen_require(`
		type security_t;
		bool secure_mode_policyload;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;

	if(!secure_mode_policyload) {
		allow $1 security_t:security setbool;

		ifdef(`distro_rhel4',`
			# needed for systems without audit support
			auditallow $1 security_t:security setbool;
		')
	}
')

########################################
## <summary>
##	Set the state of all Booleans to
##	enable or disable conditional portions of the policy.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_set_all_booleans',`
	gen_require(`
		type security_t;
		attribute boolean_type;
		bool secure_mode_policyload;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 boolean_type:dir list_dir_perms;
	allow $1 boolean_type:file rw_file_perms;

	if(!secure_mode_policyload) {
		allow $1 security_t:security setbool;

		ifdef(`distro_rhel4',`
			# needed for systems without audit support
			auditallow $1 security_t:security setbool;
		')
	}
')

########################################
## <summary>
##	Set SELinux access vector cache parameters.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_set_parameters',`
	gen_require(`
		type security_t;
		attribute can_setsecparam;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	allow $1 security_t:security setsecparam;
	auditallow $1 security_t:security setsecparam;
	typeattribute $1 can_setsecparam;
')

########################################
## <summary>
##	Validate security contexts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_validate_context',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	allow $1 security_t:security check_context;
')

########################################
## <summary>
##	Do not audit attempts to validate security contexts.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`selinux_dontaudit_validate_context',`
	gen_require(`
		type security_t;
	')

	dontaudit $1 security_t:dir list_dir_perms;
	dontaudit $1 security_t:file rw_file_perms;
	dontaudit $1 security_t:security check_context;
')

########################################
## <summary>
##	Compute an access vector.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_compute_access_vector',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	allow $1 security_t:security compute_av;
')

########################################
## <summary>
##	Calculate the default type for object creation.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_compute_create_context',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	allow $1 security_t:security compute_create;
')

########################################
## <summary>
##	Compute polyinstatntiated
##	directory members.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_compute_member',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	allow $1 security_t:security compute_member;
')

########################################
## <summary>
##	Calculate the context for relabeling objects.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_compute_relabel_context',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	allow $1 security_t:security compute_relabel;
')

########################################
## <summary>
##	Compute possible contexts for a user.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_compute_user_contexts',`
	gen_require(`
		type security_t;
	')

	allow $1 security_t:dir list_dir_perms;
	allow $1 security_t:file rw_file_perms;
	allow $1 security_t:security compute_user;
')

########################################
## <summary>
##	Unconfined access to the SELinux kernel security server.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_unconfined',`
	gen_require(`
		attribute selinux_unconfined_type;
	')

	typeattribute $1 selinux_unconfined_type;
')

########################################
## <summary>
##	Generate a file context for a boolean type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`selinux_genbool',`
	gen_require(`
		attribute boolean_type;
	')

	type $1, boolean_type;
	fs_type($1)
	mls_trusted_object($1)
')
