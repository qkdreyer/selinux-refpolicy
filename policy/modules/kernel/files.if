## <summary>Basic filesystem types and interfaces.</summary>

########################################
## <summary>
##	Make specified types usable for
##	files in filesystems.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used for files.
##	</summary>
## </param>
#
interface(`files_type',`
	gen_require(`
		attribute file_type, non_security_file_type;
	')

	typeattribute $1 file_type, non_security_file_type;
')

########################################
## <summary>
##	Make specified types files that
##	should not be dontaudited from
##	browsing from user domains.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	member directory.
##	</summary>
## </param>
#
interface(`files_security_file',`
	gen_require(`
		attribute file_type, security_file_type;
	')

	typeattribute $1 file_type, security_file_type;
')

########################################
## <summary>
##	Make specified types usable for
##	lock files.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used for lock files.
##	</summary>
## </param>
#
interface(`files_lock_file',`
	gen_require(`
		attribute lockfile;
	')

	files_type($1)
	typeattribute $1 lockfile;
')

########################################
## <summary>
##	Make specified types usable for
##	filesystem mount points.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used for mount points.
##	</summary>
## </param>
#
interface(`files_mountpoint',`
	gen_require(`
		attribute mountpoint;
	')

	files_type($1)
	typeattribute $1 mountpoint;
')

########################################
## <summary>
##	Make specified types usable for
##	security file filesystem mount points.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used for mount points.
##	</summary>
## </param>
#
interface(`files_security_mountpoint',`
	gen_require(`
		attribute mountpoint;
	')

	files_security_file($1)
	typeattribute $1 mountpoint;
')

########################################
## <summary>
##	Make specified types usable for
##	pid files.
## </summary>
## <param name="type">
##	<summary>
##	Type to be used for PID files.
##	</summary>
## </param>
#
interface(`files_pid_file',`
	gen_require(`
		attribute pidfile;
	')

	files_type($1)
	typeattribute $1 pidfile;
')

########################################
## <summary>
##	Make specified types
##	configuration files.
## </summary>
## <param name="file_type">
##	<summary>
##	Type to be used as a configuration
##	file.
##	</summary>
## </param>
#
interface(`files_config_file',`
	gen_require(`
		attribute configfile;
	')
	files_type($1)
	typeattribute $1 configfile;
')

########################################
## <summary>
##	Make specified types
##	polyinstantiated directories.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	polyinstantiated directory.
##	</summary>
## </param>
#
interface(`files_poly',`
	gen_require(`
		attribute polydir;
	')

	files_type($1)
	typeattribute $1 polydir;
')

########################################
## <summary>
##	Make specified types parents
##	of polyinstantiated directories.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	parent directory.
##	</summary>
## </param>
#
interface(`files_poly_parent',`
	gen_require(`
		attribute polyparent;
	')

	files_type($1)
	typeattribute $1 polyparent;
')

########################################
## <summary>
##	Make specified types
##	polyinstantiation member directories.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	member directory.
##	</summary>
## </param>
#
interface(`files_poly_member',`
	gen_require(`
		attribute polymember;
	')

	files_type($1)
	typeattribute $1 polymember;
')

########################################
## <summary>
##	Make domains use the specified
##	types of polyinstantiated
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain using the polyinstantiated
##	directory.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	member directory.
##	</summary>
## </param>
#
interface(`files_poly_member_tmp',`
	gen_require(`
		type tmp_t;
	')

	type_member $1 tmp_t:dir $2;
')

########################################
## <summary>
##	Make specified types files
##	used for temporary files.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to be used as a
##	temporary file.
##	</summary>
## </param>
#
interface(`files_tmp_file',`
	gen_require(`
		attribute tmpfile;
		type tmp_t;
	')

	files_type($1)
	files_poly_member($1)
	typeattribute $1 tmpfile;
')

########################################
## <summary>
##	Transform types into files, for
##	use on virtual memory filesystems.
## </summary>
## <param name="type">
##	<summary>
##	The type to be transformed.
##	</summary>
## </param>
#
interface(`files_tmpfs_file',`
	gen_require(`
		attribute tmpfsfile;
	')

	files_type($1)
	typeattribute $1 tmpfsfile;
')

########################################
## <summary>
##	Get attributes of all directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_dirs',`
	gen_require(`
		attribute file_type;
	')

	getattr_dirs_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_dirs',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:dir getattr_dir_perms;
')

########################################
## <summary>
##	List all non-security directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_non_security',`
	gen_require(`
		attribute non_security_file_type;
	')

	list_dirs_pattern($1, non_security_file_type, non_security_file_type)
')

########################################
## <summary>
##	Do not audit attempts to list all
##	non-security directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_list_non_security',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:dir list_dir_perms;
')

########################################
## <summary>
##	Mount filesystems on all non-security
##	directories and files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_mounton_non_security',`
	gen_require(`
		attribute non_security_file_type;
	')

	allow $1 non_security_file_type:dir mounton;
	allow $1 non_security_file_type:file mounton;
')

########################################
## <summary>
##	Modify any directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_write_non_security_dirs',`
	gen_require(`
		attribute non_security_file_type;
	')

	allow $1 non_security_file_type:dir write;
')

########################################
## <summary>
##	Manage non-security directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access
##	</summary>
## </param>
#
interface(`files_manage_non_security_dirs',`
	gen_require(`
		attribute non_security_file_type;
	')

	allow $1 non_security_file_type:dir manage_dir_perms;
')

########################################
## <summary>
##	Get attributes of all files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_files',`
	gen_require(`
		attribute file_type;
	')

	getattr_files_pattern($1, file_type, file_type)
	getattr_lnk_files_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_files',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of non security files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_non_security_files',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:file getattr_file_perms;
')

########################################
## <summary>
##	Read all files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_all_files',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:dir list_dir_perms;
	read_files_pattern($1, file_type, file_type)

	optional_policy(`
		auth_read_shadow($1)
	')
')

########################################
## <summary>
##	Shared library text relocations
##	in all files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_execmod_all_files',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:file execmod;
')

########################################
## <summary>
##	Read all non-security files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_non_security_files',`
	gen_require(`
		attribute non_security_file_type;
	')

	read_files_pattern($1, non_security_file_type, non_security_file_type)
	read_lnk_files_pattern($1, non_security_file_type, non_security_file_type)
')

########################################
## <summary>
##	Read all directories on filesystems,
##	except listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded. Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
interface(`files_read_all_dirs_except',`
	gen_require(`
		attribute file_type;
	')

	allow $1 { file_type $2 }:dir list_dir_perms;
')

########################################
## <summary>
##	Read all files on filesystems,
##	except the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
interface(`files_read_all_files_except',`
	gen_require(`
		attribute file_type;
	')

	read_files_pattern($1, { file_type $2 }, { file_type $2 })
')

########################################
## <summary>
##	Read all symbolic links on filesystems,
##	except the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
interface(`files_read_all_symlinks_except',`
	gen_require(`
		attribute file_type;
	')

	read_lnk_files_pattern($1, { file_type $2 }, { file_type $2 })
')

########################################
## <summary>
##	Get attributes of all symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_symlinks',`
	gen_require(`
		attribute file_type;
	')

	getattr_lnk_files_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_symlinks',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:lnk_file getattr_lnk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read all
##	symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_read_all_symlinks',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of non security symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_non_security_symlinks',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:lnk_file getattr_lnk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of non security block devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_non_security_blk_files',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:blk_file getattr_blk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of non security character devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_non_security_chr_files',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:chr_file getattr_chr_file_perms;
')

########################################
## <summary>
##	Read all symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_all_symlinks',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:dir list_dir_perms;
	read_lnk_files_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Get attributes of all pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_pipes',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:dir list_dir_perms;
	getattr_fifo_files_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_pipes',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:fifo_file getattr_fifo_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of non security pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_non_security_pipes',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:fifo_file getattr_fifo_file_perms;
')

########################################
## <summary>
##	Get attributes of all sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_sockets',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:dir list_dir_perms;
	getattr_sock_files_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_sockets',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:sock_file getattr_sock_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of non security sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_non_security_sockets',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:sock_file getattr_sock_file_perms;
')

########################################
## <summary>
##	Read block devices with file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_all_blk_files',`
	gen_require(`
		attribute file_type;
	')

	read_blk_files_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Read character devices with file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_all_chr_files',`
	gen_require(`
		attribute file_type;
	')

	read_chr_files_pattern($1, file_type, file_type)
')

########################################
## <summary>
##	Relabel all files on filesystems, except
##	the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
interface(`files_relabel_all_files',`
	gen_require(`
		attribute file_type;
	')

	allow $1 { file_type $2 }:dir list_dir_perms;
	relabel_dirs_pattern($1, { file_type $2 }, { file_type $2 })
	relabel_files_pattern($1, { file_type $2 }, { file_type $2 })
	relabel_lnk_files_pattern($1, { file_type $2 }, { file_type $2 })
	relabel_fifo_files_pattern($1, { file_type $2 }, { file_type $2 })
	relabel_sock_files_pattern($1, { file_type $2 }, { file_type $2 })
	relabel_blk_files_pattern($1, { file_type $2 }, { file_type $2 })
	relabel_chr_files_pattern($1, { file_type $2 }, { file_type $2 })
	seutil_relabelto_bin_policy($1)
')

########################################
## <summary>
##	Read and write all files on
##	filesystems, except the listed
##	exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded.  Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
interface(`files_rw_all_files',`
	gen_require(`
		attribute file_type;
	')

	rw_files_pattern($1, { file_type $2 }, { file_type $2 })
')

########################################
## <summary>
##	Manage all files on filesystems,
##	except the listed exceptions.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="exception_types" optional="true">
##	<summary>
##	The types to be excluded. Each type or attribute
##	must be negated by the caller.
##	</summary>
## </param>
#
interface(`files_manage_all_files',`
	gen_require(`
		attribute file_type;
	')

	manage_dirs_pattern($1, { file_type $2 }, { file_type $2 })
	manage_files_pattern($1, { file_type $2 }, { file_type $2 })
	manage_lnk_files_pattern($1, { file_type $2 }, { file_type $2 })
	manage_fifo_files_pattern($1, { file_type $2 }, { file_type $2 })
	manage_sock_files_pattern($1, { file_type $2 }, { file_type $2 })
	seutil_create_bin_policy($1)
	files_manage_kernel_modules($1)
')

########################################
## <summary>
##	Search all directories on
##	extended attribute filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_all',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:dir search_dir_perms;
')

########################################
## <summary>
##	List all directories on
##	extended attribute filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_all',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:dir list_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search all
##	directories on extended attribute
##	filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_all_dirs',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:dir search_dir_perms;
')

########################################
## <summary>
##	Get attributes of all filesystems
##	with types of files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_file_type_fs',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:filesystem getattr;
')

########################################
## <summary>
##	Relabel filesystems to the type
##	of files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabelto_all_file_type_fs',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:filesystem relabelto;
')

########################################
## <summary>
##	Relabel filesystems to and from the
##	type of files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabel_all_file_type_fs',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:filesystem { relabelfrom relabelto };
')

########################################
## <summary>
##	Mount filesystems with the type
##	of files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_mount_all_file_type_fs',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:filesystem mount;
')

########################################
## <summary>
##	Unmount filesystems with the
##	type of files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_unmount_all_file_type_fs',`
	gen_require(`
		attribute file_type;
	')

	allow $1 file_type:filesystem unmount;
')

#############################################
## <summary>
##	Manage all configuration directories on
##	filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_config_dirs',`
	gen_require(`
		attribute configfile;
	')

	manage_dirs_pattern($1, configfile, configfile)
')

#########################################
## <summary>
##	Relabel all configuration directories.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabel_config_dirs',`
	gen_require(`
		attribute configfile;
	')

	relabel_dirs_pattern($1, configfile, configfile)
')

########################################
## <summary>
##	Read all configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_config_files',`
	gen_require(`
		attribute configfile;
	')

	allow $1 configfile:dir list_dir_perms;
	read_files_pattern($1, configfile, configfile)
	read_lnk_files_pattern($1, configfile, configfile)
')

###########################################
## <summary>
## 	Manage all configuration files.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
## 	</summary>
## </param>
#
interface(`files_manage_config_files',`
	gen_require(`
		attribute configfile;
	')

	manage_files_pattern($1, configfile, configfile)
')

#######################################
## <summary>
##	Relabel all configuration files.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabel_config_files',`
	gen_require(`
		attribute configfile;
	')

	relabel_files_pattern($1, configfile, configfile)
')

########################################
## <summary>
##	Mount filesystems on all mount points.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_mounton_all_mountpoints',`
	gen_require(`
		attribute mountpoint;
	')

	allow $1 mountpoint:dir { search_dir_perms mounton };
	allow $1 mountpoint:file { getattr_file_perms mounton };
')

########################################
## <summary>
##	Get attributes of all mount points.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_mountpoints',`
	gen_require(`
		attribute mountpoint;
	')

	allow $1 mountpoint:dir getattr_dir_perms;
')

########################################
## <summary>
##	Search all mount points.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_all_mountpoints',`
	gen_require(`
		attribute mountpoint;
	')

	allow $1 mountpoint:dir search_dir_perms;
')

########################################
## <summary>
##	Search all mount points.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_all_mountpoints',`
	gen_require(`
		attribute mountpoint;
	')

	dontaudit $1 mountpoint:dir search_dir_perms;
')

########################################
## <summary>
##	Write all mount points.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_write_all_mountpoints',`
	gen_require(`
		attribute mountpoint;
	')

	allow $1 mountpoint:dir write;
')

########################################
## <summary>
##	List root directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_root',`
	gen_require(`
		type root_t;
	')

	allow $1 root_t:dir list_dir_perms;
	allow $1 root_t:lnk_file { read_lnk_file_perms ioctl lock };
')

########################################
## <summary>
##	Do not audit attempts to write
##	content in root directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_rw_root_dir',`
	gen_require(`
		type root_t;
	')

	dontaudit $1 root_t:dir rw_dir_perms;
')

########################################
## <summary>
##	Create an object in root directories,
##	with a private type using a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
interface(`files_root_filetrans',`
	gen_require(`
		type root_t;
	')

	filetrans_pattern($1, root_t, $2, $3)
')

########################################
## <summary>
##	Do not audit attempts to read root files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_read_root_files',`
	gen_require(`
		type root_t;
	')

	dontaudit $1 root_t:file read_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read or write
##	root files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_rw_root_files',`
	gen_require(`
		type root_t;
	')

	dontaudit $1 root_t:file rw_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read or
##	write root character devices.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_rw_root_chr_files',`
	gen_require(`
		type root_t;
	')

	dontaudit $1 root_t:chr_file rw_chr_file_perms;
')

########################################
## <summary>
##	Delete root files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_root_files',`
	gen_require(`
		type root_t;
	')

	allow $1 root_t:file delete_file_perms;
')

########################################
## <summary>
##	Remove entries from root directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_root_dir_entry',`
	gen_require(`
		type root_t;
	')

	allow $1 root_t:dir rw_dir_perms;
')

########################################
## <summary>
##	Unmount root filesystems.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_unmount_rootfs',`
	gen_require(`
		type root_t;
	')

	allow $1 root_t:filesystem unmount;
')

########################################
## <summary>
##	Get attributes of boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_boot_dirs',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_boot_dirs',`
	gen_require(`
		type boot_t;
	')

	dontaudit $1 boot_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Search boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_boot',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:dir search_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search boot
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_boot',`
	gen_require(`
		type boot_t;
	')

	dontaudit $1 boot_t:dir search_dir_perms;
')

########################################
## <summary>
##	List boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_boot',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:dir list_dir_perms;
')

########################################
## <summary>
##	Create boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_create_boot_dirs',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:dir { create_dir_perms rw_dir_perms };
')

########################################
## <summary>
##	Manage boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_boot_dirs',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:dir manage_dir_perms;
')

########################################
## <summary>
##	Create private type objects in boot
##	directories with a automatic type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private_type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
interface(`files_boot_filetrans',`
	gen_require(`
		type boot_t;
	')

	filetrans_pattern($1, boot_t, $2, $3)
')

########################################
## <summary>
##	read boot files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_boot_files',`
	gen_require(`
		type boot_t;
	')

	read_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Manage boot files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_boot_files',`
	gen_require(`
		type boot_t;
	')

	manage_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Relabel from boot files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabelfrom_boot_files',`
	gen_require(`
		type boot_t;
	')

	relabelfrom_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Read and write boot symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_boot_symlinks',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:dir list_dir_perms;
	rw_lnk_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Manage boot symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_boot_symlinks',`
	gen_require(`
		type boot_t;
	')

	manage_lnk_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Read boot files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_kernel_img',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:dir list_dir_perms;
	read_files_pattern($1, boot_t, boot_t)
	read_lnk_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Create boot files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_create_kernel_img',`
	gen_require(`
		type boot_t;
	')

	allow $1 boot_t:file { create_file_perms rw_file_perms };
	manage_lnk_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Delete boot files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_kernel',`
	gen_require(`
		type boot_t;
	')

	delete_files_pattern($1, boot_t, boot_t)
')

########################################
## <summary>
##	Get attributes of directories with
##	default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_default_dirs',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of directories with
##	default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_default_dirs',`
	gen_require(`
		type default_t;
	')

	dontaudit $1 default_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Search directories with
##	default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_default',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:dir search_dir_perms;
')

########################################
## <summary>
##	List directories with default
##	file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_default',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:dir list_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to list
##	directories with default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_list_default',`
	gen_require(`
		type default_t;
	')

	dontaudit $1 default_t:dir list_dir_perms;
')

########################################
## <summary>
##	Manage directories with
##	default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_default_dirs',`
	gen_require(`
		type default_t;
	')

	manage_dirs_pattern($1, default_t, default_t)
')

########################################
## <summary>
##	Mount filesystems on directories
##	with default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_mounton_default',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:dir { search_dir_perms mounton };
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of files with default
##	file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_default_files',`
	gen_require(`
		type default_t;
	')

	dontaudit $1 default_t:file getattr_file_perms;
')

########################################
## <summary>
##	Read files with default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_default_files',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:file read_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read files
##	with default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_read_default_files',`
	gen_require(`
		type default_t;
	')

	dontaudit $1 default_t:file read_file_perms;
')

########################################
## <summary>
##	Manage files with
##	default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_default_files',`
	gen_require(`
		type default_t;
	')

	manage_files_pattern($1, default_t, default_t)
')

########################################
## <summary>
##	Read symbolic links with default
##	file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_default_symlinks',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Read sockets with default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_default_sockets',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:sock_file read_sock_file_perms;
')

########################################
## <summary>
##	Read named pipes with default file types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_default_pipes',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:fifo_file read_fifo_file_perms;
')

########################################
## <summary>
##	Search generic etc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_etc',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir search_dir_perms;
')

########################################
## <summary>
##	Set attributes of generic etc
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_setattr_etc_dirs',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir setattr_dir_perms;
')

########################################
## <summary>
##	List generic etc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_etc',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir list_dir_perms;
')

########################################
## <summary>
##	Add and remove entries from
##	generic etc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_etc_dirs',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir rw_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to write
##	generic etc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_write_etc_dirs',`
	gen_require(`
		type etc_t;
	')

	dontaudit $1 etc_t:dir write;
')

##########################################
## <summary>
## 	Manage generic etc directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_etc_dirs',`
	gen_require(`
		type etc_t;
	')

	manage_dirs_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Read generic etc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_etc_files',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir list_dir_perms;
	read_files_pattern($1, etc_t, etc_t)
	read_lnk_files_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Do not audit attempts to write
##	generic etc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_write_etc_files',`
	gen_require(`
		type etc_t;
	')

	dontaudit $1 etc_t:file write_file_perms;
')

########################################
## <summary>
##	Read and write generic etc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_etc_files',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir list_dir_perms;
	rw_files_pattern($1, etc_t, etc_t)
	read_lnk_files_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Manage generic etc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_etc_files',`
	gen_require(`
		type etc_t;
	')

	manage_files_pattern($1, etc_t, etc_t)
	read_lnk_files_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Delete generic etc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_etc_files',`
	gen_require(`
		type etc_t;
	')

	delete_files_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Remove entries from generic etc
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_etc_dir_entry',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir del_entry_dir_perms;
')

########################################
## <summary>
##	Execute generic etc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_exec_etc_files',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir list_dir_perms;
	read_lnk_files_pattern($1, etc_t, etc_t)
	exec_files_pattern($1, etc_t, etc_t)
')

#######################################
## <summary>
##	Relabel generic etc files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabel_etc_files',`
	gen_require(`
		type etc_t;
	')

	allow $1 etc_t:dir list_dir_perms;
	relabel_files_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Read generic etc symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_etc_symlinks',`
	gen_require(`
		type etc_t;
	')

	read_lnk_files_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Manage generic etc symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_etc_symlinks',`
	gen_require(`
		type etc_t;
	')

	manage_lnk_files_pattern($1, etc_t, etc_t)
')

########################################
## <summary>
##	Create objects in generic etc
##	directories with private types using a
##	type_transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	Private file type.
##	</summary>
## </param>
## <param name="class">
##	<summary>
##	Object classes to be created.
##	</summary>
## </param>
#
interface(`files_etc_filetrans',`
	gen_require(`
		type etc_t;
	')

	filetrans_pattern($1, etc_t, $2, $3)
')

########################################
## <summary>
##	Create boot flags.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_create_boot_flag',`
	gen_require(`
		type root_t, etc_runtime_t;
	')

	allow $1 etc_runtime_t:file manage_file_perms;
	filetrans_pattern($1, root_t, etc_runtime_t, file)
')

########################################
## <summary>
##	Read files in generic etc directories
##	that are dynamically created on boot,
##	such as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_etc_runtime_files',`
	gen_require(`
		type etc_t, etc_runtime_t;
	')

	allow $1 etc_t:dir list_dir_perms;
	read_files_pattern($1, etc_t, etc_runtime_t)
	read_lnk_files_pattern($1, etc_t, etc_runtime_t)
')

########################################
## <summary>
##	Do not audit attempts to read files
##	in generic etc directories that are
##	dynamically created on boot, such
##	as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_read_etc_runtime_files',`
	gen_require(`
		type etc_runtime_t;
	')

	dontaudit $1 etc_runtime_t:file read_file_perms;
')

########################################
## <summary>
##	Read and write files in generic etc
##	directories that are dynamically
##	created on boot, such as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_etc_runtime_files',`
	gen_require(`
		type etc_t, etc_runtime_t;
	')

	allow $1 etc_t:dir list_dir_perms;
	rw_files_pattern($1, etc_t, etc_runtime_t)
')

########################################
## <summary>
##	Manage files in generic etc directories
##	that are dynamically created on boot,
##	such as mtab.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_etc_runtime_files',`
	gen_require(`
		type etc_t, etc_runtime_t;
	')

	manage_files_pattern($1, { etc_t etc_runtime_t }, etc_runtime_t)
')

########################################
## <summary>
##	Create etc runtime objects with an
##	automatic type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The class of the object being created.
##	</summary>
## </param>
#
interface(`files_etc_filetrans_etc_runtime',`
	gen_require(`
		type etc_t, etc_runtime_t;
	')

	filetrans_pattern($1, etc_t, etc_runtime_t, $2)
')

########################################
## <summary>
##	Get attributes of directories on new
##	filesystems that have not yet been
##	labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_isid_type_dirs',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search
##	directories on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_isid_type_dirs',`
	gen_require(`
		type file_t;
	')

	dontaudit $1 file_t:dir search_dir_perms;
')

########################################
## <summary>
##	List directories on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_isid_type_dirs',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:dir list_dir_perms;
')

########################################
## <summary>
##	Read and write directories on new
##	filesystems that have not yet been
##	labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_isid_type_dirs',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:dir rw_dir_perms;
')

########################################
## <summary>
##	Delete directories on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_isid_type_dirs',`
	gen_require(`
		type file_t;
	')

	delete_dirs_pattern($1, file_t, file_t)
')

########################################
## <summary>
##	Do not audit attempts to write character
##	devices that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_write_isid_chr_files',`
	gen_require(`
		type file_t;
	')

	dontaudit $1 file_t:chr_file write_chr_file_perms;
')

########################################
## <summary>
##	Manage directories on new
##	filesystems that have not yet been
##	labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_isid_type_dirs',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:dir manage_dir_perms;
')

########################################
## <summary>
##	Mount filesystems on directories on
##	new filesystems that have not yet
##	been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_mounton_isid_type_dirs',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:dir { search_dir_perms mounton };
')

########################################
## <summary>
##	Read files on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_isid_type_files',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:file read_file_perms;
')

########################################
## <summary>
##	Delete files on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_isid_type_files',`
	gen_require(`
		type file_t;
	')

	delete_files_pattern($1, file_t, file_t)
')

########################################
## <summary>
##	Delete symbolic links on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_isid_type_symlinks',`
	gen_require(`
		type file_t;
	')

	delete_lnk_files_pattern($1, file_t, file_t)
')

########################################
## <summary>
##	Delete pipes on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_isid_type_fifo_files',`
	gen_require(`
		type file_t;
	')

	delete_fifo_files_pattern($1, file_t, file_t)
')

########################################
## <summary>
##	Delete sockets on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_isid_type_sock_files',`
	gen_require(`
		type file_t;
	')

	delete_sock_files_pattern($1, file_t, file_t)
')

########################################
## <summary>
##	Delete block devices on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_isid_type_blk_files',`
	gen_require(`
		type file_t;
	')

	delete_blk_files_pattern($1, file_t, file_t)
')

########################################
## <summary>
##	Delete character devices on new filesystems
##	that have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_isid_type_chr_files',`
	gen_require(`
		type file_t;
	')

	delete_chr_files_pattern($1, file_t, file_t)
')

########################################
## <summary>
##	Manage files on new filesystems that
##	have not yet been labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_isid_type_files',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:file manage_file_perms;
')

########################################
## <summary>
##	Manage symbolic links on new
##	filesystems that have not yet been
##	labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_isid_type_symlinks',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:lnk_file manage_lnk_file_perms;
')

########################################
## <summary>
##	Read and write block devices on new
##	filesystems that have not yet been
##	labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_isid_type_blk_files',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:blk_file rw_blk_file_perms;
	allow $1 home_root_t:dir search_dir_perms;
	allow $1 home_root_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Manage block devices on new
##	filesystems that have not yet been
##	labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_isid_type_blk_files',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:blk_file manage_blk_file_perms;
	allow $1 home_root_t:dir search_dir_perms;
	allow $1 home_root_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Manages character devices on new
##	filesystems that have not yet been
##	labeled.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_isid_type_chr_files',`
	gen_require(`
		type file_t;
	')

	allow $1 file_t:chr_file manage_chr_file_perms;
	allow $1 home_root_t:dir search_dir_perms;
	allow $1 home_root_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Get attributes of home directory
##	roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_home_dir',`
	gen_require(`
		type home_root_t;
	')

	allow $1 home_root_t:dir getattr_dir_perms;
	allow $1 home_root_t:lnk_file getattr_lnk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of home directory roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_home_dir',`
	gen_require(`
		type home_root_t;
	')

	dontaudit $1 home_root_t:dir getattr_dir_perms;
	dontaudit $1 home_root_t:lnk_file getattr_lnk_file_perms;
')

########################################
## <summary>
##	Search home directory roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_home',`
	gen_require(`
		type home_root_t;
	')

	allow $1 home_root_t:dir search_dir_perms;
	allow $1 home_root_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to search
##	home directory roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_home',`
	gen_require(`
		type home_root_t;
	')

	dontaudit $1 home_root_t:dir search_dir_perms;
	dontaudit $1 home_root_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to list
##	home directory roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_list_home',`
	gen_require(`
		type home_root_t;
	')

	dontaudit $1 home_root_t:dir list_dir_perms;
	dontaudit $1 home_root_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	List home directory roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_home',`
	gen_require(`
		type home_root_t;
	')

	allow $1 home_root_t:dir list_dir_perms;
	allow $1 home_root_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Relabel to home directory roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabelto_home',`
	gen_require(`
		type home_root_t;
	')

	allow $1 home_root_t:dir relabelto;
')

########################################
## <summary>
##	Create objects in home directory
##	roots.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="home_type">
##	<summary>
##	The private type.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The class of the object being created.
##	</summary>
## </param>
#
interface(`files_home_filetrans',`
	gen_require(`
		type home_root_t;
	')

	filetrans_pattern($1, home_root_t, $2, $3)
')

########################################
## <summary>
##	Get attributes of lost+found directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_lost_found_dirs',`
	gen_require(`
		type lost_found_t;
	')

	allow $1 lost_found_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of lost+found directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_lost_found_dirs',`
	gen_require(`
		type lost_found_t;
	')

	dontaudit $1 lost_found_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Manage content in lost+found
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_lost_found',`
	gen_require(`
		type lost_found_t;
	')

	manage_dirs_pattern($1, lost_found_t, lost_found_t)
	manage_files_pattern($1, lost_found_t, lost_found_t)
	manage_lnk_files_pattern($1, lost_found_t, lost_found_t)
	manage_fifo_files_pattern($1, lost_found_t, lost_found_t)
	manage_sock_files_pattern($1, lost_found_t, lost_found_t)
')

########################################
## <summary>
##	Search mnt directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_mnt',`
	gen_require(`
		type mnt_t;
	')

	allow $1 mnt_t:dir search_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search mnt
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_mnt',`
	gen_require(`
		type mnt_t;
	')

	dontaudit $1 mnt_t:dir search_dir_perms;
')

########################################
## <summary>
##	List mnt directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_mnt',`
	gen_require(`
		type mnt_t;
	')

	allow $1 mnt_t:dir list_dir_perms;
')

######################################
## <summary>
##  Do not audit attempts to list mnt directories.
## </summary>
## <param name="domain">
##  <summary>
##  Domain to not audit.
##  </summary>
## </param>
#
interface(`files_dontaudit_list_mnt',`
	gen_require(`
		type mnt_t;
	')

	dontaudit $1 mnt_t:dir list_dir_perms;
')

########################################
## <summary>
##	Mount filesystems on mnt directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_mounton_mnt',`
	gen_require(`
		type mnt_t;
	')

	allow $1 mnt_t:dir { search_dir_perms mounton };
')

########################################
## <summary>
##	Manage mnt directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_mnt_dirs',`
	gen_require(`
		type mnt_t;
	')

	allow $1 mnt_t:dir manage_dir_perms;
')

########################################
## <summary>
##	Manage mnt files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_mnt_files',`
	gen_require(`
		type mnt_t;
	')

	manage_files_pattern($1, mnt_t, mnt_t)
')

########################################
## <summary>
##	Read mnt files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_mnt_files',`
	gen_require(`
		type mnt_t;
	')

	read_files_pattern($1, mnt_t, mnt_t)
')

########################################
## <summary>
##	Manage mnt symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_mnt_symlinks',`
	gen_require(`
		type mnt_t;
	')

	manage_lnk_files_pattern($1, mnt_t, mnt_t)
')

########################################
## <summary>
##	Search kernel module directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	allow $1 modules_object_t:dir search_dir_perms;
	read_lnk_files_pattern($1, modules_object_t, modules_object_t)
')

########################################
## <summary>
##	List kernel module directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	allow $1 modules_object_t:dir list_dir_perms;
')

########################################
## <summary>
##	Get attributes of kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	getattr_files_pattern($1, modules_object_t, modules_object_t)
')

########################################
## <summary>
##	Read kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	allow $1 modules_object_t:dir list_dir_perms;
	read_files_pattern($1, modules_object_t, modules_object_t)
	read_lnk_files_pattern($1, modules_object_t, modules_object_t)
')

########################################
## <summary>
##	Write kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_write_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	allow $1 modules_object_t:dir list_dir_perms;
	write_files_pattern($1, modules_object_t, modules_object_t)
')

########################################
## <summary>
##	Delete kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	delete_files_pattern($1, modules_object_t, modules_object_t)
')

########################################
## <summary>
##	Manage kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	manage_files_pattern($1, modules_object_t, modules_object_t)
')

########################################
## <summary>
##	Relabel kernel module files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabel_kernel_modules',`
	gen_require(`
		type modules_object_t;
	')

	relabel_files_pattern($1, modules_object_t, modules_object_t)
	allow $1 modules_object_t:dir list_dir_perms;
')

########################################
## <summary>
##	Create objects in kernel module
##	directories with private types via
##	an automatic type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private_type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
interface(`files_kernel_modules_filetrans',`
	gen_require(`
		type modules_object_t;
	')

	filetrans_pattern($1, modules_object_t, $2, $3)
')

########################################
## <summary>
##	List world-readable directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_world_readable',`
	gen_require(`
		type readable_t;
	')

	allow $1 readable_t:dir list_dir_perms;
')

########################################
## <summary>
##	Read world-readable files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_world_readable_files',`
	gen_require(`
		type readable_t;
	')

	allow $1 readable_t:file read_file_perms;
')

########################################
## <summary>
##	Read world-readable symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_world_readable_symlinks',`
	gen_require(`
		type readable_t;
	')

	allow $1 readable_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Read world-readable pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_world_readable_pipes',`
	gen_require(`
		type readable_t;
	')

	allow $1 readable_t:fifo_file read_fifo_file_perms;
')

########################################
## <summary>
##	Read world-readable sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_world_readable_sockets',`
	gen_require(`
		type readable_t;
	')

	allow $1 readable_t:sock_file read_sock_file_perms;
')

#######################################
## <summary>
##  Read system configuration files in
##	generic etc directories.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`files_read_system_conf_files',`
	gen_require(`
		type etc_t, system_conf_t;
	')

	allow $1 etc_t:dir list_dir_perms;
	read_files_pattern($1, etc_t, system_conf_t)
	read_lnk_files_pattern($1, etc_t, system_conf_t)
')

######################################
## <summary>
##  Manage system configuration files
##	in generic etc directories.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`files_manage_system_conf_files',`
	gen_require(`
		type etc_t, system_conf_t;
	')

	manage_files_pattern($1, { etc_t system_conf_t }, system_conf_t)
')

###################################
## <summary>
##  Create files in generic etc directories
##	with types used for the system
##	configuration files.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`files_etc_filetrans_system_conf',`
	gen_require(`
		type etc_t, system_conf_t;
	')

	filetrans_pattern($1, etc_t, system_conf_t, file)
')

########################################
## <summary>
##	Associate a filesystem with types of
##	temporary directories.
## </summary>
## <param name="file_type">
##	<summary>
##	Type of the file to associate.
##	</summary>
## </param>
#
interface(`files_associate_tmp',`
	gen_require(`
		type tmp_t;
	')

	allow $1 tmp_t:filesystem associate;
')

########################################
## <summary>
##	Get attributes of generic tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_tmp_dirs',`
	gen_require(`
		type tmp_t;
	')

	allow $1 tmp_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of generic tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_tmp_dirs',`
	gen_require(`
		type tmp_t;
	')

	dontaudit $1 tmp_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Search generic tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_tmp',`
	gen_require(`
		type tmp_t;
	')

	allow $1 tmp_t:dir search_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_tmp',`
	gen_require(`
		type tmp_t;
	')

	dontaudit $1 tmp_t:dir search_dir_perms;
')

########################################
## <summary>
##	Read generic tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_tmp',`
	gen_require(`
		type tmp_t;
	')

	allow $1 tmp_t:dir list_dir_perms;
')

########################################
## <summary>
##	Do not audit listing of generic tmp
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain not to audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_list_tmp',`
	gen_require(`
		type tmp_t;
	')

	dontaudit $1 tmp_t:dir list_dir_perms;
')

########################################
## <summary>
##	Remove entries from generic
##	tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_tmp_dir_entry',`
	gen_require(`
		type tmp_t;
	')

	allow $1 tmp_t:dir del_entry_dir_perms;
')

########################################
## <summary>
##	Read generic tmp files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_generic_tmp_files',`
	gen_require(`
		type tmp_t;
	')

	read_files_pattern($1, tmp_t, tmp_t)
')

########################################
## <summary>
##	Manage generic tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_generic_tmp_dirs',`
	gen_require(`
		type tmp_t;
	')

	manage_dirs_pattern($1, tmp_t, tmp_t)
')

########################################
## <summary>
##	Shared library text relocations in
##	generic tmp files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_execmod_tmp',`
	gen_require(`
		attribute tmpfile;
	')

	allow $1 tmpfile:file execmod;
')

########################################
## <summary>
##	Manage generic tmp files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_generic_tmp_files',`
	gen_require(`
		type tmp_t;
	')

	manage_files_pattern($1, tmp_t, tmp_t)
')

########################################
## <summary>
##	Read generic tmp symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_generic_tmp_symlinks',`
	gen_require(`
		type tmp_t;
	')

	read_lnk_files_pattern($1, tmp_t, tmp_t)
')

########################################
## <summary>
##	Read and write generic tmp named sockets.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_generic_tmp_sockets',`
	gen_require(`
		type tmp_t;
	')

	rw_sock_files_pattern($1, tmp_t, tmp_t)
')

########################################
## <summary>
##	Set attributes of all tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_setattr_all_tmp_dirs',`
	gen_require(`
		attribute tmpfile;
	')

	allow $1 tmpfile:dir { search_dir_perms setattr_dir_perms };
')

########################################
## <summary>
##	List all tmp directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_all_tmp',`
	gen_require(`
		attribute tmpfile;
	')

	allow $1 tmpfile:dir list_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all tmp files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain not to audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_tmp_files',`
	gen_require(`
		attribute tmpfile;
	')

	dontaudit $1 tmpfile:file getattr_file_perms;
')

########################################
## <summary>
##	Get attributes of all tmp files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_all_tmp_files',`
	gen_require(`
		attribute tmpfile;
	')

	allow $1 tmpfile:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all tmp sock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain not to audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_tmp_sockets',`
	gen_require(`
		attribute tmpfile;
	')

	dontaudit $1 tmpfile:sock_file getattr_sock_file_perms;
')

########################################
## <summary>
##	Read all tmp files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_all_tmp_files',`
	gen_require(`
		attribute tmpfile;
	')

	read_files_pattern($1, tmpfile, tmpfile)
')

########################################
## <summary>
##	Create objects in generic tmp directories,
##	with private types using a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
interface(`files_tmp_filetrans',`
	gen_require(`
		type tmp_t;
	')

	filetrans_pattern($1, tmp_t, $2, $3)
')

########################################
## <summary>
##	Delete all tmp content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_purge_tmp',`
	gen_require(`
		attribute tmpfile;
	')

	allow $1 tmpfile:dir list_dir_perms;
	delete_dirs_pattern($1, tmpfile, tmpfile)
	delete_files_pattern($1, tmpfile, tmpfile)
	delete_lnk_files_pattern($1, tmpfile, tmpfile)
	delete_fifo_files_pattern($1, tmpfile, tmpfile)
	delete_sock_files_pattern($1, tmpfile, tmpfile)
	files_delete_isid_type_dirs($1)
	files_delete_isid_type_files($1)
	files_delete_isid_type_symlinks($1)
	files_delete_isid_type_fifo_files($1)
	files_delete_isid_type_sock_files($1)
	files_delete_isid_type_blk_files($1)
	files_delete_isid_type_chr_files($1)
')

########################################
## <summary>
##	Search generic usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_usr',`
	gen_require(`
		type usr_t;
	')

	allow $1 usr_t:dir search_dir_perms;
')

########################################
## <summary>
##	List generic usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_usr',`
	gen_require(`
		type usr_t;
	')

	allow $1 usr_t:dir list_dir_perms;
')

########################################
## <summary>
##	Add and remove entries from generic
##	usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_usr_dirs',`
	gen_require(`
		type usr_t;
	')

	allow $1 usr_t:dir rw_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to add and
##	remove entries from generic
##	usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_rw_usr_dirs',`
	gen_require(`
		type usr_t;
	')

	dontaudit $1 usr_t:dir rw_dir_perms;
')

########################################
## <summary>
##	Delete generic usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_usr_dirs',`
	gen_require(`
		type usr_t;
	')

	delete_dirs_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Set attributes of generic usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_setattr_usr_dirs',`
	gen_require(`
		type usr_t;
	')

	allow $1 usr_t:dir setattr_dir_perms;
')

########################################
## <summary>
##	Delete generic usr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_usr_files',`
	gen_require(`
		type usr_t;
	')

	delete_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Get attributes of generic usr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_usr_files',`
	gen_require(`
		type usr_t;
	')

	getattr_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Read generic usr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_usr_files',`
	gen_require(`
		type usr_t;
	')

	allow $1 usr_t:dir list_dir_perms;
	read_files_pattern($1, usr_t, usr_t)
	read_lnk_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Execute generic usr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_exec_usr_files',`
	gen_require(`
		type usr_t;
	')

	allow $1 usr_t:dir list_dir_perms;
	exec_files_pattern($1, usr_t, usr_t)
	read_lnk_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Do not audit attempts to write
##	generic usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_write_usr_dirs',`
	gen_require(`
		type usr_t;
	')

	dontaudit $1 usr_t:dir write;
')

########################################
## <summary>
##	Do not audit attempts to write
##	generic usr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_write_usr_files',`
	gen_require(`
		type usr_t;
	')

	dontaudit $1 usr_t:file write_file_perms;
')

########################################
## <summary>
##	Manage generic usr directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_usr_files',`
	gen_require(`
		type usr_t;
	')

	manage_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Relabel to generic usr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabelto_usr_files',`
	gen_require(`
		type usr_t;
	')

	relabelto_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Relabel from generic usr files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_relabelfrom_usr_files',`
	gen_require(`
		type usr_t;
	')

	relabelfrom_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Read generic usr symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_usr_symlinks',`
	gen_require(`
		type usr_t;
	')

	read_lnk_files_pattern($1, usr_t, usr_t)
')

########################################
## <summary>
##	Create objects in generic usr directories,
##	with private types using a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
interface(`files_usr_filetrans',`
	gen_require(`
		type usr_t;
	')

	filetrans_pattern($1, usr_t, $2, $3)
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic usr src directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_src',`
	gen_require(`
		type src_t;
	')

	dontaudit $1 src_t:dir search_dir_perms;
')

########################################
## <summary>
##	Get attributes of generic usr src files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_usr_src_files',`
	gen_require(`
		type usr_t, src_t;
	')

	getattr_files_pattern($1, src_t, src_t)
	read_lnk_files_pattern($1, usr_t, src_t)
')

########################################
## <summary>
##	Read generic usr src files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_usr_src_files',`
	gen_require(`
		type usr_t, src_t;
	')

	allow $1 usr_t:dir search_dir_perms;
	read_files_pattern($1, { usr_t src_t }, src_t)
	read_lnk_files_pattern($1, { usr_t src_t }, src_t)
	allow $1 src_t:dir list_dir_perms;
')

########################################
## <summary>
##	Execute generic usr src files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_exec_usr_src_files',`
	gen_require(`
		type usr_t, src_t;
	')

	list_dirs_pattern($1, usr_t, src_t)
	exec_files_pattern($1, src_t, src_t)
	read_lnk_files_pattern($1, src_t, src_t)
')

########################################
## <summary>
##	Install system.map into boot
##	directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_create_kernel_symbol_table',`
	gen_require(`
		type boot_t, system_map_t;
	')

	allow $1 boot_t:dir { list_dir_perms add_entry_dir_perms };
	allow $1 system_map_t:file { create_file_perms rw_file_perms };
')

########################################
## <summary>
##	Read system.map in boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_kernel_symbol_table',`
	gen_require(`
		type boot_t, system_map_t;
	')

	allow $1 boot_t:dir list_dir_perms;
	read_files_pattern($1, boot_t, system_map_t)
')

########################################
## <summary>
##	Delete system.map in boot directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_kernel_symbol_table',`
	gen_require(`
		type boot_t, system_map_t;
	')

	allow $1 boot_t:dir list_dir_perms;
	delete_files_pattern($1, boot_t, system_map_t)
')

########################################
## <summary>
##	Search generic var directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_var',`
	gen_require(`
		type var_t;
	')

	allow $1 var_t:dir search_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to write
##	generic var directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_write_var_dirs',`
	gen_require(`
		type var_t;
	')

	dontaudit $1 var_t:dir write;
')

########################################
## <summary>
##	Write generic var directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_write_var_dirs',`
	gen_require(`
		type var_t;
	')

	allow $1 var_t:dir write;
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic var directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_var',`
	gen_require(`
		type var_t;
	')

	dontaudit $1 var_t:dir search_dir_perms;
')

########################################
## <summary>
##	List generic var directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_var',`
	gen_require(`
		type var_t;
	')

	allow $1 var_t:dir list_dir_perms;
')

########################################
## <summary>
##	Manage generic var directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_var_dirs',`
	gen_require(`
		type var_t;
	')

	allow $1 var_t:dir manage_dir_perms;
')

########################################
## <summary>
##	Read generic var files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_var_files',`
	gen_require(`
		type var_t;
	')

	read_files_pattern($1, var_t, var_t)
')

########################################
## <summary>
##	Read and write generic var files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_var_files',`
	gen_require(`
		type var_t;
	')

	rw_files_pattern($1, var_t, var_t)
')

########################################
## <summary>
##	Do not audit attempts to read and write
##	generic var files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_rw_var_files',`
	gen_require(`
		type var_t;
	')

	dontaudit $1 var_t:file rw_file_perms;
')

########################################
## <summary>
##	Manage generic var files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_var_files',`
	gen_require(`
		type var_t;
	')

	manage_files_pattern($1, var_t, var_t)
')

########################################
## <summary>
##	Read generic var symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_var_symlinks',`
	gen_require(`
		type var_t;
	')

	read_lnk_files_pattern($1, var_t, var_t)
')

########################################
## <summary>
##	Manage generic var symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_var_symlinks',`
	gen_require(`
		type var_t;
	')

	manage_lnk_files_pattern($1, var_t, var_t)
')

########################################
## <summary>
##	Create objects in generic var directories,
##	with private types using a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
interface(`files_var_filetrans',`
	gen_require(`
		type var_t;
	')

	filetrans_pattern($1, var_t, $2, $3)
')

########################################
## <summary>
##	Get attributes of generic
##	var lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_var_lib_dirs',`
	gen_require(`
		type var_t, var_lib_t;
	')

	getattr_dirs_pattern($1, var_t, var_lib_t)
')

########################################
## <summary>
##	Search generic var lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_var_lib',`
	gen_require(`
		type var_t, var_lib_t;
	')

	search_dirs_pattern($1, var_t, var_lib_t)
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic var lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_var_lib',`
	gen_require(`
		type var_lib_t;
	')

	dontaudit $1 var_lib_t:dir search_dir_perms;
')

########################################
## <summary>
##	List generic var lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_var_lib',`
	gen_require(`
		type var_t, var_lib_t;
	')

	list_dirs_pattern($1, var_t, var_lib_t)
')

###########################################
## <summary>
##	Read and write generic var lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_var_lib_dirs',`
	gen_require(`
		type var_lib_t;
	')

	rw_dirs_pattern($1, var_lib_t, var_lib_t)
')

########################################
## <summary>
##	Create objects in generic var lib directories,
##	with private types using a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file_type">
##	<summary>
##	The type of the object to be created
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The object class.
##	</summary>
## </param>
#
interface(`files_var_lib_filetrans',`
	gen_require(`
		type var_t, var_lib_t;
	')

	allow $1 var_t:dir search_dir_perms;
	filetrans_pattern($1, var_lib_t, $2, $3)
')

########################################
## <summary>
##	Read generic var lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_var_lib_files',`
	gen_require(`
		type var_t, var_lib_t;
	')

	allow $1 var_lib_t:dir list_dir_perms;
	read_files_pattern($1, { var_t var_lib_t }, var_lib_t)
')

########################################
## <summary>
##	Read generic var lib symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_var_lib_symlinks',`
	gen_require(`
		type var_t, var_lib_t;
	')

	read_lnk_files_pattern($1, { var_t var_lib_t }, var_lib_t)
')

########################################
## <summary>
##	Manage pseudorandom number generator
##	seeds (Deprecated).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_urandom_seed',`
	gen_require(`
		type var_t, var_lib_t;
	')

	allow $1 var_t:dir search_dir_perms;
	manage_files_pattern($1, var_lib_t, var_lib_t)
	refpolicywarn(`$0() has been deprecated, please use files_manage_var_lib_files() instead.')
')

########################################
## <summary>
##	Manage generic var lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_var_lib_files',`
	gen_require(`
		type var_t, var_lib_t;
	')

	allow $1 var_t:dir search_dir_perms;
	manage_files_pattern($1, var_lib_t, var_lib_t)
')

########################################
## <summary>
##	Manage mount tables (Deprecated).
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_mounttab',`
	gen_require(`
		type var_t, var_lib_t;
	')

	allow $1 var_t:dir search_dir_perms;
	manage_files_pattern($1, var_lib_t, var_lib_t)
	refpolicywarn(`$0() has been deprecated, please use files_manage_var_lib_files() instead.')
')

########################################
## <summary>
##	Search generic lock directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_locks',`
	gen_require(`
		type var_t, var_lock_t;
	')

	search_dirs_pattern($1, var_t, var_lock_t)
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic lock directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_locks',`
	gen_require(`
		type var_lock_t;
	')

	dontaudit $1 var_lock_t:dir search_dir_perms;
')

########################################
## <summary>
##	Add and remove entries in
##	generic lock directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_lock_dirs',`
	gen_require(`
		type var_t, var_lock_t;
	')

	rw_dirs_pattern($1, var_t, var_lock_t)
')

########################################
## <summary>
##	Get attributes of generic lock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_getattr_generic_locks',`
	gen_require(`
		type var_t, var_lock_t;
	')

	allow $1 var_t:dir search_dir_perms;
	allow $1 var_lock_t:dir list_dir_perms;
	getattr_files_pattern($1, var_lock_t, var_lock_t)
')

########################################
## <summary>
##	Manage generic lock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_generic_locks',`
	gen_require(`
		type var_t, var_lock_t;
	')

	allow $1 var_t:dir search_dir_perms;
	manage_files_pattern($1, var_lock_t, var_lock_t)
')

########################################
## <summary>
##	Delete all lock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_all_locks',`
	gen_require(`
		attribute lockfile;
		type var_t;
	')

	allow $1 var_t:dir search_dir_perms;
	delete_files_pattern($1, lockfile, lockfile)
')

########################################
## <summary>
##	Read all lock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_all_locks',`
	gen_require(`
		attribute lockfile;
		type var_t, var_lock_t;
	')

	allow $1 { var_t var_lock_t }:dir search_dir_perms;
	allow $1 lockfile:dir list_dir_perms;
	read_files_pattern($1, lockfile, lockfile)
	read_lnk_files_pattern($1, lockfile, lockfile)
')

########################################
## <summary>
##	manage all lock files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_all_locks',`
	gen_require(`
		attribute lockfile;
		type var_t, var_lock_t;
	')

	allow $1 { var_t var_lock_t }:dir search_dir_perms;
	manage_dirs_pattern($1, lockfile, lockfile)
	manage_files_pattern($1, lockfile, lockfile)
	manage_lnk_files_pattern($1, lockfile, lockfile)
')

########################################
## <summary>
##	Create an object in generic lock directories,
##	with private types using a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
interface(`files_lock_filetrans',`
	gen_require(`
		type var_t, var_lock_t;
	')

	allow $1 var_t:dir search_dir_perms;
	filetrans_pattern($1, var_lock_t, $2, $3)
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of generic pid directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_pid_dirs',`
	gen_require(`
		type var_run_t;
	')

	dontaudit $1 var_run_t:dir getattr_dir_perms;
')

########################################
## <summary>
##	Search generic pid directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_pids',`
	gen_require(`
		type var_t, var_run_t;
	')

	search_dirs_pattern($1, var_t, var_run_t)
')

#######################################
## <summary>
##	Create generic pid directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_create_var_run_dirs',`
	gen_require(`
		type var_t, var_run_t;
	')

	allow $1 var_t:dir search_dir_perms;
	allow $1 var_run_t:dir create_dir_perms;
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic pid directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_pids',`
	gen_require(`
		type var_run_t;
	')

	dontaudit $1 var_run_t:dir search_dir_perms;
')

########################################
## <summary>
##	List generic pid directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_pids',`
	gen_require(`
		type var_t, var_run_t;
	')

	list_dirs_pattern($1, var_t, var_run_t)
')

########################################
## <summary>
##	Read generic pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_generic_pids',`
	gen_require(`
		type var_t, var_run_t;
	')

	list_dirs_pattern($1, var_t, var_run_t)
	read_files_pattern($1, var_run_t, var_run_t)
')

########################################
## <summary>
##	Write generic pid pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_write_generic_pid_pipes',`
	gen_require(`
		type var_run_t;
	')

	allow $1 var_run_t:fifo_file write_fifo_file_perms;
')

########################################
## <summary>
##	Create an object in generic pid directories,
##	with private types using a type
##	transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private type">
##	<summary>
##	The type of the object to be created.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The object class of the object being created.
##	</summary>
## </param>
#
interface(`files_pid_filetrans',`
	gen_require(`
		type var_t, var_run_t;
	')

	allow $1 var_t:dir search_dir_perms;
	filetrans_pattern($1, var_run_t, $2, $3)
')

########################################
## <summary>
##	Read and write generic pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_generic_pids',`
	gen_require(`
		type var_t, var_run_t;
	')

	list_dirs_pattern($1, var_t, var_run_t)
	rw_files_pattern($1, var_run_t, var_run_t)
')

########################################
## <summary>
##	Do not audit attempts to get
##	attributes of all pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_all_pids',`
	gen_require(`
		attribute pidfile;
	')

	dontaudit $1 pidfile:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to write to
##	all pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_write_all_pids',`
	gen_require(`
		attribute pidfile;
	')

	dontaudit $1 pidfile:file write;
')

########################################
## <summary>
##	Do not audit attempts to ioctl
##	all pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_ioctl_all_pids',`
	gen_require(`
		attribute pidfile;
	')

	dontaudit $1 pidfile:file ioctl;
')

########################################
## <summary>
##	Read all pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_all_pids',`
	gen_require(`
		attribute pidfile;
		type var_t;
	')

	list_dirs_pattern($1, var_t, pidfile)
	read_files_pattern($1, pidfile, pidfile)
	read_lnk_files_pattern($1, pidfile, pidfile)
')

########################################
## <summary>
##	Mount filesystems on all polyinstantiation
##	member directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_mounton_all_poly_members',`
	gen_require(`
		attribute polymember;
	')

	allow $1 polymember:dir mounton;
')

########################################
## <summary>
##	Delete all pid content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_all_pids',`
	gen_require(`
		attribute pidfile;
		type var_t, var_run_t;
	')

	allow $1 var_t:dir search_dir_perms;
	allow $1 var_run_t:dir rmdir;
	allow $1 var_run_t:lnk_file delete_lnk_file_perms;
	delete_files_pattern($1, pidfile, pidfile)
	delete_fifo_files_pattern($1, pidfile, pidfile)
	delete_sock_files_pattern($1, pidfile, { pidfile var_run_t })
')

########################################
## <summary>
##	Delete all pid directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_delete_all_pid_dirs',`
	gen_require(`
		attribute pidfile;
		type var_t;
	')

	allow $1 var_t:dir search_dir_perms;
	delete_dirs_pattern($1, pidfile, pidfile)
')

########################################
## <summary>
##	Set attributes of generic pid directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_setattr_pid_dirs',`
	gen_require(`
		type var_run_t;
	')

	allow $1 var_run_t:dir setattr_dir_perms;
')

########################################
## <summary>
##	Search generic spool directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_search_spool',`
	gen_require(`
		type var_t, var_spool_t;
	')

	search_dirs_pattern($1, var_t, var_spool_t)
')

########################################
## <summary>
##	Do not audit attempts to search
##	generic spool directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_search_spool',`
	gen_require(`
		type var_spool_t;
	')

	dontaudit $1 var_spool_t:dir search_dir_perms;
')

########################################
## <summary>
##	List generic spool directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_list_spool',`
	gen_require(`
		type var_t, var_spool_t;
	')

	list_dirs_pattern($1, var_t, var_spool_t)
')

########################################
## <summary>
##	Manage generic spool directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_generic_spool_dirs',`
	gen_require(`
		type var_t, var_spool_t;
	')

	allow $1 var_t:dir search_dir_perms;
	manage_dirs_pattern($1, var_spool_t, var_spool_t)
')

########################################
## <summary>
##	Read generic spool files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_read_generic_spool',`
	gen_require(`
		type var_t, var_spool_t;
	')

	list_dirs_pattern($1, var_t, var_spool_t)
	read_files_pattern($1, var_spool_t, var_spool_t)
')

########################################
## <summary>
##	Manage generic spool files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_generic_spool',`
	gen_require(`
		type var_t, var_spool_t;
	')

	allow $1 var_t:dir search_dir_perms;
	manage_files_pattern($1, var_spool_t, var_spool_t)
')

########################################
## <summary>
##	Create objects in the generic spool directory
##	with private types with a type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="file">
##	<summary>
##	Type to which the created node will be transitioned.
##	</summary>
## </param>
## <param name="class">
##	<summary>
##	Object class(es) (single or set including {}) for which this
##	the transition will occur.
##	</summary>
## </param>
#
interface(`files_spool_filetrans',`
	gen_require(`
		type var_t, var_spool_t;
	')

	allow $1 var_t:dir search_dir_perms;
	filetrans_pattern($1, var_spool_t, $2, $3)
')

########################################
## <summary>
##	Manage all polyinstantiated
##	directories on the system.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_polyinstantiate_all',`
	gen_require(`
		attribute polydir, polymember, polyparent;
		type poly_t;
	')

	selinux_compute_member($1)

	allow $1 self:capability { chown fsetid sys_admin fowner };

	allow $1 polydir:dir { create_dir_perms add_entry_dir_perms setattr_dir_perms mounton delete_dir_perms };

	allow $1 polymember:dir search_dir_perms;

	allow $1 polyparent:dir { getattr_dir_perms mounton };

	allow $1 self:process setfscreate;
	allow $1 polymember: dir { create_dir_perms setattr_dir_perms relabelto_dir_perms };
	allow $1 polydir: dir add_entry_dir_perms;
	allow $1 polyparent:dir { add_entry_dir_perms del_entry_dir_perms list_dir_perms relabel_dir_perms };

	allow $1 poly_t:dir { create_dir_perms mounton };
	fs_unmount_xattr_fs($1)

	fs_mount_tmpfs($1)
	fs_unmount_tmpfs($1)

	ifdef(`distro_redhat',`
		files_search_tmp($1)
		files_search_home($1)
		corecmd_exec_bin($1)
		seutil_domtrans_setfiles($1)
	')
')

########################################
## <summary>
##	Unconfined access to files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_unconfined',`
	gen_require(`
		attribute files_unconfined_type;
	')

	typeattribute $1 files_unconfined_type;
')

########################################
## <summary>
##	Create a core files in filesystem root directories
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_root_files',`
	gen_require(`
		type root_t;
	')

	manage_files_pattern($1, root_t, root_t)
')

########################################
## <summary>
##	Create default directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_create_default_dir',`
	gen_require(`
		type default_t;
	')

	allow $1 default_t:dir create_dir_perms;
')

########################################
## <summary>
##	Create, default_t objects with an automatic
##	type transition.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="object">
##	<summary>
##	The class of the object being created.
##	</summary>
## </param>
#
interface(`files_root_filetrans_default',`
	gen_require(`
		type root_t, default_t;
	')

	filetrans_pattern($1, root_t, default_t, $2)
')

########################################
## <summary>
##	manage generic pid symbolic links.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_manage_generic_pids_symlinks',`
	gen_require(`
		type var_run_t;
	')

	manage_lnk_files_pattern($1, var_run_t, var_run_t)
')

########################################
## <summary>
##	Do not audit attempts to get attributes
##	of all tmpfs files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_getattr_tmpfs_files',`
	gen_require(`
		attribute tmpfsfile;
	')

	allow $1 tmpfsfile:file getattr_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read security files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_read_security_files',`
	gen_require(`
		attribute security_file_type;
	')

	dontaudit $1 security_file_type:file read_file_perms;
')

########################################
## <summary>
##	Read and write any files inherited
##	from processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_rw_all_inherited_files',`
	gen_require(`
		attribute file_type;
	')

	allow $1 { file_type $2 }:file rw_inherited_file_perms;
	allow $1 { file_type $2 }:fifo_file rw_inherited_fifo_file_perms;
	allow $1 { file_type $2 }:sock_file rw_inherited_sock_file_perms;
	allow $1 { file_type $2 }:chr_file rw_inherited_chr_file_perms;
')

########################################
## <summary>
##	Allow any file point to be the entrypoint of this domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_entrypoint_all_files',`
	gen_require(`
		attribute file_type;
	')
	allow $1 file_type:file entrypoint;
')

########################################
## <summary>
##	Do not audit attempts to read and write
##	inherited file perms of non security files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`files_dontaudit_all_non_security_leaks',`
	gen_require(`
		attribute non_security_file_type;
	')

	dontaudit $1 non_security_file_type:file_class_set rw_inherited_file_perms;
')

########################################
## <summary>
##	Do not audit attempts to read or write
##	all leaked files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_dontaudit_leaks',`
	gen_require(`
		attribute file_type;
	')

	dontaudit $1 file_type:file rw_inherited_file_perms;
	dontaudit $1 file_type:lnk_file read;
')

########################################
## <summary>
##	Create file as all types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`files_create_as_is_all_files',`
	gen_require(`
		attribute file_type;
		class kernel_service create_files_as;
	')

	allow $1 file_type:kernel_service create_files_as;
')
