## <summary>X Window Managers.</summary>

#######################################
## <summary>
##	The role template for the wm module.
## </summary>
## <param name="role_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
#
template(`wm_role_template',`
	gen_require(`
		attribute wm_domain;
		type wm_exec_t, wm_tmp_t, wm_home_t, wm_tmpfs_t;
	')

	type $1_wm_t;
	typeattribute $1_wm_t wm_domain;
	domain_type($1_wm_t)
	domain_entry_file($1_wm_t, wm_exec_t)
	ubac_constrained($1_wm_t)
	role $2 types $1_wm_t;

	allow $1_wm_t self:fifo_file rw_fifo_file_perms;
	allow $1_wm_t self:process getsched;
	allow $1_wm_t self:shm create_shm_perms;

	# fix me
	allow $1_wm_t $3:process sigkill;

	manage_dirs_pattern($1_wm_t, wm_home_t, wm_home_t)
	manage_files_pattern($1_wm_t, wm_home_t, wm_home_t)
	userdom_user_home_dir_filetrans($1_wm_t, wm_home_t, { dir file })

	manage_dirs_pattern($1_wm_t, wm_tmp_t, wm_tmp_t)
	manage_files_pattern($1_wm_t, wm_tmp_t, wm_tmp_t)
	files_tmp_filetrans($1_wm_t, wm_tmp_t, { dir file })

	manage_sock_files_pattern($1_wm_t, wm_tmp_t, wm_tmp_t)
	userdom_user_tmp_filetrans($1_wm_t, wm_tmp_t, sock_file)

	manage_files_pattern($1_wm_t, wm_tmpfs_t, wm_tmpfs_t)
	fs_tmpfs_filetrans($1_wm_t, wm_tmpfs_t, file)

	domtrans_pattern($3, wm_exec_t, $1_wm_t)

	kernel_read_system_state($1_wm_t)

	corecmd_bin_domtrans($1_wm_t, $3)
	corecmd_shell_domtrans($1_wm_t, $3)

	dev_read_urand($1_wm_t)

	files_read_etc_files($1_wm_t)
	files_read_usr_files($1_wm_t)

	fs_search_auto_mountpoints($1_wm_t)
	fs_getattr_tmpfs($1_wm_t)

	mls_file_read_all_levels($1_wm_t)
	mls_file_write_all_levels($1_wm_t)
	mls_xwin_read_all_levels($1_wm_t)
	mls_xwin_write_all_levels($1_wm_t)
	mls_fd_use_all_levels($1_wm_t)

	auth_use_nsswitch($1_wm_t)

	miscfiles_read_fonts($1_wm_t)
	miscfiles_read_localization($1_wm_t)

	userdom_setattr_user_tmp_dirs($1_wm_t)
	userdom_stream_connect($1_wm_t)
	userdom_signull_unpriv_users($1_wm_t)
	userdom_read_user_tmpfs_files($1_wm_t)

	wm_stream_connect($1, $3)
	wm_signull($3)
	wm_sigchld($1, $3)

	tunable_policy(`use_nfs_home_dirs',`
		fs_manage_nfs_dirs($1_wm_t)
		fs_manage_nfs_files($1_wm_t)
		fs_manage_nfs_symlinks($1_wm_t)
	')

	tunable_policy(`use_samba_home_dirs',`
		fs_manage_cifs_dirs($1_wm_t)
		fs_manage_cifs_files($1_wm_t)
		fs_manage_cifs_symlinks($1_wm_t)
	')

	optional_policy(`
		automount_dontaudit_getattr_tmp_dirs($1_wm_t)
	')

	optional_policy(`
		dbus_system_bus_client($1_wm_t)
		dbus_session_bus_client($1_wm_t)
		wm_dbus_chat($1, $3)
	')

	optional_policy(`
		gnome_read_generic_cache_files($1_wm_t)
		gnome_read_generic_data_files($1_wm_t)
		gnome_search_generic_config_dirs($1_wm_t)
		gnome_search_generic_data_dirs($1_wm_t)
		gnome_write_generic_cache_files($1_wm_t)
	')

	optional_policy(`
		# Not sure why i needed this but i did for xguest.
		mozilla_sigkill($1_wm_t)
		mozilla_signull($1_wm_t)
		mozilla_read_tmpfs_files($1_wm_t)
		mozilla_delete_tmpfs_files($1_wm_t)
	')

	optional_policy(`
		nsplugin_signull($1_wm_t)
		nsplugin_read_tmpfs_files($1_wm_t)
		nsplugin_delete_tmpfs_files($1_wm_t)
	')

	optional_policy(`
		pulseaudio_rw_home_files($1_wm_t)
		pulseaudio_signull($1_wm_t)
		pulseaudio_stream_connect($1_wm_t)
		pulseaudio_search_home_dirs($1_wm_t)
		pulseaudio_read_tmpfs_files($1_wm_t)
		pulseaudio_write_tmp_sockets($1_wm_t)
	')

	optional_policy(`
		thunderbird_signull($1_wm_t)
		thunderbird_read_tmpfs_files($1_wm_t)
		thunderbird_delete_tmpfs_files($1_wm_t)
	')

	optional_policy(`
		totem_signull($1_wm_t)
		totem_read_tmpfs_files($1_wm_t)
		totem_delete_tmpfs_files($1_wm_t)
	')

	optional_policy(`
		xserver_role($2, $1_wm_t)
		xserver_manage_core_devices($1_wm_t)
	')
')

########################################
## <summary>
##	Execute the wm.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_exec',`
	gen_require(`
		type wm_exec_t;
	')

	can_exec($1, wm_exec_t)
	corecmd_search_bin($1)
')

########################################
## <summary>
##	Send and receive messages from
##	wm over dbus.
## </summary>
## <param name="role_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_dbus_chat',`
	gen_require(`
		type $1_wm_t;
		class dbus send_msg;
	')

	allow $2 $1_wm_t:dbus send_msg;
	allow $1_wm_t $2:dbus send_msg;
')

########################################
## <summary>
##	List wm home directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_list_home_dirs',`
	gen_require(`
		type wm_home_t;
	')

	allow $1 wm_home_t:dir list_dir_perms;
	userdom_search_user_home_dirs($1)
')

########################################
## <summary>
##	Read wm home files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_read_user_home_files',`
	gen_require(`
		type wm_home_t;
	')

	allow $1 wm_home_t:dir search_dir_perms;
	allow $1 wm_home_t:file read_file_perms;
	userdom_search_user_home_dirs($1)
')

########################################
## <summary>
##	Manage wm home content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_manage_user_home_content',`
	gen_require(`
		type wm_home_t;
	')

	manage_dirs_pattern($1, wm_home_t, wm_home_t)
	manage_files_pattern($1, wm_home_t, wm_home_t)
	userdom_search_user_home_dirs($1)
')

########################################
## <summary>
##	Relabel wm home content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_relabel_user_home_content',`
	gen_require(`
		type wm_home_t;
	')

	relabel_dirs_pattern($1, wm_home_t, wm_home_t)
	relabel_files_pattern($1, wm_home_t, wm_home_t)
	userdom_search_user_home_dirs($1)
')

########################################
## <summary>
##	Stream connect to Windows manager.
## </summary>
## <param name="role_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_stream_connect',`
	gen_require(`
		type $1_wm_t, wm_tmp_t;
	')

	stream_connect_pattern($2, wm_tmp_t, wm_tmp_t, $1_wm_t)
	userdom_search_user_tmp_dirs($2)
')

########################################
## <summary>
##	Send null signals to Windows manager.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_signull',`
	gen_require(`
		attribute wm_domain;
	')

	allow $1 wm_domain:process signull;
')

########################################
## <summary>
##	Send child signals to Windows manager.
## </summary>
## <param name="role_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_sigchld',`
	gen_require(`
		type $1_wm_t;
	')

	allow $2 $1_wm_t:process sigchld;
')

########################################
## <summary>
##	Manage wm temporary content.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_manage_tmp_content',`
	gen_require(`
		type wm_tmp_t;
	')

	manage_dirs_pattern($1, wm_tmp_t, wm_tmp_t)
	manage_files_pattern($1, wm_tmpfs_t, wm_tmpfs_t)
	manage_sock_files_pattern($1, wm_tmp_t, wm_tmp_t)
	userdom_search_user_tmp_dirs($1)
')

########################################
## <summary>
##	Relabel wm temporary content.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_relabel_tmp_content',`
	gen_require(`
		type wm_tmp_t;
	')

	relabel_dirs_pattern($1, wm_tmp_t, wm_tmp_t)
	relabel_files_pattern($1, wm_tmpfs_t, wm_tmpfs_t)
	relabel_sock_files_pattern($1, wm_tmp_t, wm_tmp_t)
	userdom_search_user_tmp_dirs($1)
')

########################################
## <summary>
##	Read wm tmpfs files.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_read_tmpfs_files',`
	gen_require(`
		type wm_tmpfs_t;
	')

	allow $1 wm_tmpfs_t:file read_file_perms;
	fs_search_tmpfs($1)
')

########################################
## <summary>
##	Manage wm tmpfs content.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_manage_tmpfs_content',`
	gen_require(`
		type wm_tmpfs_t;
	')

	manage_files_pattern($1, wm_tmpfs_t, wm_tmpfs_t)
	fs_search_tmpfs($1)
')

########################################
## <summary>
##	Relabel wm tmpfs content.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_relabel_tmpfs_content',`
	gen_require(`
		type wm_tmpfs_t;
	')

	relabel_files_pattern($1, wm_tmpfs_t, wm_tmpfs_t)
	fs_search_tmpfs($1)
')

########################################
## <summary>
##	Delete wm tmpfs files.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_delete_tmpfs_files', `
	gen_require(`
		type wm_tmpfs_t;
	')

	allow $1 wm_tmpfs_t:file delete_file_perms;
	fs_search_tmpfs($1)
')

########################################
## <summary>
##	Read and write inherited wm tmpfs files.
## </summary>
## <param name="domain">
## 	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`wm_rw_inherited_tmpfs_files', `
	gen_require(`
		type wm_tmpfs_t;
	')

	allow $1 wm_tmpfs_t:file rw_inherited_file_perms;
	fs_search_tmpfs($1)
')
